#!/usr/bin/env ksh

FNAIFY_VERSION=3.0

#########################################################################
# fnaify 								#
# ======								#
#									#
# Run FNA/XNA games on OpenBSD						#
#									#
# created 2017-12-27 by Thomas Frohwein (thfr)				#
# portability fixes by Mariusz Zaborski (oshogbo)			#
#									#
# FNA is a reimplementation of the Microsoft XNA Game Studio 4.0	#
# Refresh libraries.							#
# Thanks to the great work by Ethan Lee (flibitijibibo) games using FNA	#
# are highly portable and can even run on OpenBSD. Please refer to	#
# https://fna-xna.github.io/ for more information about FNA.		#
#									#
# License: ISC								#
#########################################################################

# TODO:
# - fix FIXMEs/TODOs
# - check_nlog now only looks at major version number; is there a better way?
#   (it reports only major in 'monodis --assembly': 3.0.0.0, 4.0.0.0)
# - figure out how to do selection between AJ1.exe and AJ2.exe for Apple Jack
# - fails to detect XNA in Streets of Fury EX because of whitespace; resolved after renaming .exe
# - update the creator for dllmap file; based on fnaify.dllmap.config
# - pick FNA version with better performance than 17.12
# - Streets of Fury EX needs the XNA bridge/NetStub files (still not running past initial screen)
#	-> needs to detect Microsoft.Xna.Framework in the Beat*.dll file rather than .exe
# - fix 'ls:  /usr/local/lib/steamworks-nosteam : No such file or directory' in check_remove_steam*
# - instead of substituting fnaify.dllmap.config for /etc/mono/config
#   turn the dllmap file into FNA.dll.config, so that it's loaded side-by-side with /etc/mono/config
# - fix structure of USAGE; follow man page examples
# - update man page/README for new syntax with modes setup, run
# - clarify nomenclature in documentation (and code): modes is 'setup', 'run' etc. interactivity flags: '-i', '-y'
# - mention package fnaify-extralibs in documentation
# - test MidBoss and check how to implement libSDL_image_compact better ... maybe in MidBoss.exe.config??
# - add flag to choose framework file: '-f'?
# - add flag to choose FNA version
# - add option to add runtime exe_flags to run mode

USAGE="
Usage:

`basename $0` setup [-i|-y] [-hv] [-c <configfile>] [-d <depdir>] [-m <monopath>] [<gamedir>]
`basename $0` run [-hv] [-c <configfile>] [-d <depdir>] [-m <monopath>] [<gamedir>]
`basename $0` help
`basename $0` [-V]

-c: specify config file for dllmap (optional)
-d: replace directories for finding dependencies
-h: print usage information
-i: interactive mode
-m: add directories to MONO_PATH
-y: non-interactive mode; automatically replies 'yes' to all recommended choices
-V: display version
-v: verbose output

<gamedir> is optional and defaults to the current directory if not specified.
"

mode=
depdir="/usr/local/lib:/usr/X11R6/lib"	# /usr/X11R6/lib is location of libfreetype.so on OpenBSD
gamedir="$PWD"
interaction=n	# y|n|i: yes to all, no to all, interactive
licenses=
gameconfig=
frameworkfile=
frameworkversion=
frameworkmajor=
frameworkminor=
monopath="${MONO_PATH}"
netstub_commit=e7d890e0ede0caa9e76ef37af6070344e3ab0abf
newline='
'

if [ -d "/usr/local/lib/steamworks-nosteam" ] ; then
	monopath="${monopath}:/usr/local/lib/steamworks-nosteam"
	depdir="/usr/local/lib/steamworks-nosteam:$depdir"
fi
if [ -d "/usr/local/share/steamstubs" ]; then
	monopath="${monopath}:/usr/local/share/steamstubs"
fi
if [ -d "/usr/local/share/fnaify-libs" ]; then
	depdir="/usr/local/share/fnaify-libs:$depdir"
fi

#list of exefiles and their number
exefile=
nexefile=0	# TODO: is nexefile really needed?
my_exe=""
exe_flags=""
exe_env=""

SAVEIFS=$IFS
fna_warning=0
nlog_warning=0

needlibarray="" # array that will hold the names of needed libraries

# array of lib names to ignore for the configuration checking
ignoredarray="
FarseerPhysics.Portable.xml
libCommunityExpressSW.so
libCSteamworks.so
libGalaxy64.so
libGalaxyCSharpGlue.so
libGalaxy.so
libParisSteam.so
libSkiaSharp.so
libSteamWrapper.so
libXNAFileDialog.so
libXNAWebRenderer.so
libsteam_api.so
libcef.so
libfmod.so
libfmodstudio.so
libtiny_jpeg.so
steamwrapper.so
steam_appid.txt
"

# array of mono files that need to be removed from the game folder
monofilearray="
I18N.CJK.dll
I18N.MidEast.dll
I18N.Other.dll
I18N.Rare.dll
I18N.West.dll
I18N.dll
Microsoft.CSharp.dll
Mono.CSharp.dll
Mono.Posix.dll
Mono.Security.dll
System.Configuration.dll
System.Core.dll
System.Data.dll
System.Drawing.dll
System.IO.Compression.FileSystem.dll
System.IO.Compression.dll
System.Net.dll
System.Numerics.dll
System.Runtime.Serialization.dll
System.Security.dll
System.ServiceModel.dll
System.Web.Extensions.dll
System.Web.Http.dll
System.Web.Services.dll
System.Web.dll
System.Windows.Forms.dll
System.Xml.Linq.dll
System.Xml.dll
System.dll
WindowsBase.dll
libMonoPosixHelper.so.x86
libMonoPosixHelper.so.x86_64
monoconfig
monomachineconfig
mscorlib.dll
"

debug_echo()
{
	if [ -z "$FNAIFY_DEBUG" ]; then
		return
	fi
	if [ "${1}" = '-n' ]; then
		printf "$2"
	else
		printf "$1\n"
	fi
}

printdash()
{
	if [ -z "$*" ]; then
		return
	fi
	printf "$*\n"
	c=1
	dashes=
	while [ $c -lt $(echo "$*" | wc -c) ]
	do
		dashes="${dashes}-"
		# $((...)) for arithmetic substitution
		c=$((c+1))
	done
	echo "$dashes"
}

inarray() # check if $1 is in array $2
{
	firstarg="$1"
	shift 1
	echo "$*" | grep -q "$firstarg"
}

# function to find the latest present library. Return -1 if none found.
# $1 is the basename of the library without the version suffix (e.g. /usr/lib/libc.so)
# it will return the filename of the latest library version (e.g. /usr/lib/libc.so.96.0)
latest_syslib()
{
	if [ -z "$1" ] ; then
		return 1
	fi
	find "$(dirname $1)" -maxdepth 1 -name "$(basename $1)*" | tail -1
}

trunklibnam() # truncate library name
{
	libnam="$1"
	libnam="$(echo "$libnam" | sed -n -E "s/[\.0-9]*$//p")"
	echo "$libnam" | sed -E "s/(libSDL2[^-]*)-2\.0(\.so.*)/\1\2/"
}

validlib() # returns 1 if $1 is in ignoredarray, otherwise 0
{
	libnam="$(trunklibnam $1)"
	if [ -n "$(echo \"$ignoredarray\" | grep $libnam)" ]; then
		return 1
	elif [ -n "$(echo \"$libnam\" | grep '\.dll[ \t]*')" ]; then
		return 1
	else
		return 0
	fi
}

symlink_mg_libs()
{
	mg_subdirs="x64
x86"
	debug_echo "\nChecking for MonoGame x64/x86 dir to create symlinks"

	
	if [ \( ! -e "$gamedir/x64" \) -a \( ! -e "$gamedir/x86" \) ]; then
		debug_echo "\nCouldn't find directories x64 or x86 in $gamedir"
	else
		for d in ${mg_subdirs[@]} ; do
			debug_echo "\nProcessing library directory $gamedir/$d"
			for file in $(ls "$gamedir/$d"); do
				# sort out libs that need to be ignored
				validlib $file
				if [ $? -eq 1 ]; then
					debug_echo "\tignored file: $file"
					continue
				fi
				debug_echo "\tfound library file: $file. Replacing with symlink..."
				trunk=$(trunklibnam "$file")
				rm "$gamedir/$d/$file"
				debug_echo -n "\t\tchecking for location of $trunk... "
				if [ -n "$(latest_syslib /usr/local/lib/$trunk)" ] ; then
					debug_echo "found in /usr/local/lib!"
					trunkpath="/usr/local/lib/$trunk"
				elif [ -n "$(latest_syslib /usr/X11R6/lib/$trunk)" ] ; then
					debug_echo "found in /usr/X11R6/lib!"
					trunkpath="/usr/X11R6/lib/$trunk"
				elif [ -n "$(latest_syslib /usr/lib/$trunk)" ] ; then
					debug_echo "found in /usr/lib!"
					trunkpath="/usr/lib/$trunk"
				else
					debug_echo "NOT FOUND!!"
					trunkpath=
					echo "\n\t - ERROR: couldn't find system lib for $file"
				fi
				ln -s "$(latest_syslib "$trunkpath")" "$gamedir/$d/$file"
			done
			debug_echo "Done with library directory $gamedir/$d"
		done
		debug_echo "\nCreating libdl.so.2 symlink\n"
		ln -s "$(latest_syslib /usr/lib/libc.so)" "$gamedir/libdl.so.2"
	fi
}

selectexe()
{
	debug_echo "attempting to auto-select .exe assembly to run"
	if [ $nexefile -gt 1 ]; then
		if [ "x$interaction" = "xi" ] ; then
			i=1
			while [ $i -le $nexefile ]; do
				echo "$i: $(echo $exefile | cut -f $i -d ':')"
				i=$((i + 1))
			done
			input_exe=0
			while [ \( $(echo "$input_exe" | wc -c) -gt 2 \) -o \( -z "$(echo "$input_exe" | grep [1-9])" \) -o \( $input_exe -gt $((i - 1)) \) ]; do
				echo -n "Enter number of .exe file to run: "
				read input_exe
			done
			# NOTE: this only works for up to 9 candidate files
			my_exe="$(echo $exefile | cut -f $input_exe -d ':')"
		else
			# FIXME: for now just pick the first .exe. Come up with
			#        better heuristic
			my_exe="$(echo $exefile | cut -f 1 -d ':')"
		fi
	elif [ $nexefile -eq 1 ]; then
		my_exe="$exefile"
	else
		echo "ERROR: no .exe file found\n"
		exit 1
	fi
	my_exe="$(echo "$my_exe" | sed -E "s/[ \t]$//")" # trim trailing whitespace
}

check_gameconfig()
{
	if [ -z "$gameconfig" ] ; then
		if [ -f "$HOME/.config/fnaify/fnaify.dllmap.config" ] ; then
			gameconfig="$HOME/.config/fnaify/fnaify.dllmap.config"
			# check for outdated config file
			if [ "x$(cat "$gameconfig" | grep -m 1 "fnaify version $FNAIFY_VERSION")" = "x" ] ; then
				echo "WARNING: $gameconfig appears to be out of date. It is strongly recommended to remove it and re-run `basename $0`."
			fi
		else
			if [ -f "/usr/local/share/fnaify/fnaify.dllmap.config" ] ; then
				gameconfig="/usr/local/share/fnaify/fnaify.dllmap.config"
			else	# in this case create ~/.config/fnaify/fnaify.dllmap.config
				gameconfig="$HOME/.config/fnaify/fnaify.dllmap.config"
				debug_echo "creating $gameconfig"
				mkdir -p ~/.config/fnaify
				cat <<EOF > "$gameconfig"
<!-- mono config file for fnaify -->
<!-- fnaify version 3.0 -->
<configuration>
	<!-- SteamworksNative: Khet 2.0, etc -->
	<dllmap dll="SteamworksNative">
		<dllentry dll="libstubborn.so" name="GetStat" target="int_0"/>
		<dllentry dll="libstubborn.so" name="Initialize" target="int_0"/>
		<dllentry dll="libstubborn.so" name="RunCallbacks" target="ptr_null"/>
	</dllmap>

	<!-- steamwrapper: Dead Pixels -->
	<dllmap dll="steamwrapper.dll">
		<dllentry dll="libstubborn.so" name="API_RunCallbacks" target="int_0"/>
		<dllentry dll="libstubborn.so" name="API_Init" target="int_0"/>
		<dllentry dll="libstubborn.so" name="API_Shutdown" target="int_0"/>
		<dllentry dll="libstubborn.so" name="Stats_getStat" target="int_0"/>
	</dllmap>

	<!-- fmod_event -->
	<dllmap dll="fmod_event.dll">
		<dllentry dll="libstubborn.so" name="FMOD_EventSystem_Create" target="int_0"/>
	</dllmap>

	<!-- general -->
	<dllmap dll="FAudio" target="libFAudio.so"/>
	<dllmap dll="MojoShader.dll" target="libmojoshader.so"/>
	<dllmap dll="SDL2.dll" target="libSDL2.so"/>
	<!-- MidBoss needs libSDL2_image_compact.so -->
	<dllmap dll="SDL2_image.dll" target="libSDL2_image.so"/>
	<dllmap dll="SDL2_mixer.dll" target="libSDL2_mixer.so"/>
	<dllmap dll="SDL2_ttf.dll" target="libSDL2_ttf.so"/>
	<dllmap dll="freetype6" target="libfreetype.so" />
	<dllmap dll="freetype6.dll" target="libfreetype.so" />
	<dllmap dll="libtheorafile.dll" target="libtheorafile.so"/>
	<dllmap dll="libtheoraplay.dll" target="libtheoraplay.so"/>
	<dllmap dll="libvorbisfile.dll" target="libvorbisfile.so"/>
	<dllmap dll="libvorbisfile-3.dll" target="libvorbisfile.so"/>
	<dllmap dll="openal32.dll" target="libopenal.so"/>
	<dllmap dll="soft_oal.dll" target="libopenal.so"/>
	<dllmap dll="System.Native" target="libmono-native.so"/>
	<dllmap dll="System.Net.Security.Native" target="libmono-native.so"/>

	<!-- Atom Zombie Smasher -->
	<dllmap dll="msvcr100.dll" target="libc.so"/>

	<!-- Terraria, Solaroids -->
	<dllmap dll="gdiplus.dll" target="libgdiplus.so"/>

	<!-- Nuclex.Input: Dead Pixels, Amazing Princess Sarah, Akane the Kunoichi -->
	<dllmap dll="kernel32">
		<dllentry dll="ld.so" name="LoadLibrary" target="dlopen"/>
	</dllmap>

	<!-- Steam stubs -->
	<!-- CommunityExpressSW: Little Racers STREET, Murder Miners -->
	<dllmap dll="CommunityExpressSW" target="libcestub.so"/>
	<!--<dllmap dll="SteamworksNative.dll" target="libSteamworksNative.so"/>-->
	<!-- SteamWrapper: Bastion -->
	<dllmap dll="SteamWrapper.dll">
		<dllentry dll="libstubborn.so" name="SteamWrapper_GetCurrentGameLanguage"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="SteamWrapper_Init"				target="int_0"/>
		<dllentry dll="libstubborn.so" name="SteamWrapper_GetUserDataFolder"		target="string_empty"/>
		<dllentry dll="libstubborn.so" name="SteamWrapper_RunCallbacks"			target="int_0"/>
		<dllentry dll="libstubborn.so" name="SteamWrapper_LbUploadScore"		target="int_0"/>
		<dllentry dll="libstubborn.so" name="SteamWrapper_Shutdown"			target="int_0"/>
		<dllentry dll="libstubborn.so" name="SteamWrapper_SetAchievement"		target="int_0"/>
	</dllmap>
	<!-- steam_api: Unrailed!, Before the Echo -->
	<dllmap dll="steam_api">
		<dllentry dll="libstubborn.so" name="SteamAPI_Init"		target="int_0"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_RegisterCallback"		target="int_0"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_GetHSteamUser"		target="int_0"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_GetHSteamPipe"		target="int_1"/>
		<dllentry dll="libstubborn.so" name="SteamInternal_CreateInterface"	target="int_1"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_ISteamClient_GetISteamUser"	target="int_1"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_ISteamClient_GetISteamFriends"	target="int_1"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_ISteamClient_GetISteamUtils"	target="int_1"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_ISteamClient_GetISteamMatchmaking"	target="int_1"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_ISteamClient_GetISteamMatchmakingServers"	target="int_1"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_ISteamClient_GetISteamUserStats"	target="int_1"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_ISteamClient_GetISteamApps"	target="int_1"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_ISteamClient_GetISteamNetworking"	target="int_1"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_ISteamClient_GetISteamRemoteStorage"	target="int_1"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_ISteamClient_GetISteamScreenshots"	target="int_1"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_ISteamClient_GetISteamGameSearch"	target="int_1"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_ISteamClient_GetISteamHTTP"	target="int_1"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_ISteamClient_GetISteamController"	target="int_1"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_ISteamClient_GetISteamUGC"	target="int_1"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_ISteamClient_GetISteamAppList"	target="int_1"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_ISteamClient_GetISteamMusic"	target="int_1"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_ISteamClient_GetISteamMusicRemote"	target="int_1"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_ISteamClient_GetISteamHTMLSurface"	target="int_1"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_ISteamClient_GetISteamInventory"	target="int_1"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_ISteamClient_GetISteamVideo"	target="int_1"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_ISteamClient_GetISteamParentalSettings"	target="int_1"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_ISteamClient_GetISteamInput"	target="int_1"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_ISteamClient_GetISteamParties"	target="int_1"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_ISteamUser_GetSteamID"	target="int_1"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_ISteamFriends_GetFriendPersonaName"	target="string_empty"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_ISteamUserStats_RequestCurrentStats"	target="int_1"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_ISteamApps_GetCurrentBetaName"	target="string_empty"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_ISteamApps_BIsDlcInstalled"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_ISteamApps_GetLaunchCommandLine"	target="string_empty"/>
		<dllentry dll="libstubborn.so" name="SteamUserStats"		target="int_1"/>
		<dllentry dll="libstubborn.so" name="SteamRemoteStorage"	target="int_1"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_ISteamRemoteStorage_FileExists"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_RunCallbacks"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_ISteamRemoteStorage_FileWrite"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_Shutdown"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_ISteamUserStats_GetAchievement"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_ISteamUserStats_SetAchievement"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_ISteamUserStats_StoreStats"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_ISteamInput_Init"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="SteamAPI_RestartAppIfNecessary"	target="int_0"/>
	</dllmap>
	<!-- steam_api64: Burning Knight -->
	<dllmap dll="steam_api64">
		<dllentry dll="libstubborn.so" name="SteamAPI_Init"		target="int_0"/>
	</dllmap>

	<!-- FMOD stubs -->
	<dllmap dll="fmodstudio">
		<dllentry dll="libstubborn.so" name="FMOD_Studio_System_Create"		target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_System_Initialize"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_System_SetListenerAttributes"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_System_Update"		target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_System_LoadBankFile"		target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_System_GetVCA"		target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_VCA_SetVolume"		target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_VCA_GetVolume"		target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_System_GetEvent"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventDescription_LoadSampleData"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventDescription_CreateInstance"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventDescription_Is3D"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventInstance_Start"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_System_GetBus"		target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_Bus_SetPaused"		target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_Bus_GetPaused"		target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventInstance_GetDescription"	target="int_0"/>
		<!-- Celeste needs a specific value for 2 variables -->
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventDescription_GetPath"	target="int_celeste_event"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_Bank_LoadSampleData"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventInstance_SetVolume"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_System_GetListenerAttributes"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventInstance_Set3DAttributes"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventInstance_Release"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventInstance_GetVolume"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventInstance_Stop"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventInstance_Get3DAttributes"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_System_Release"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventInstance_SetParameterValue"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventDescription_IsOneshot"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventInstance_SetPaused"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventInstance_TriggerCue"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_Bus_StopAllEvents"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventInstance_GetPaused"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventInstance_GetPlaybackState"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_System_GetLowLevelSystem"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventDescription_GetInstanceCount"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventDescription_UnloadSampleData"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_System_FlushCommands"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_Bus_GetChannelGroup"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventInstance_SetCallback"	target="int_0"/>
	</dllmap>
	<dllmap dll="fmodstudio.dll">
		<dllentry dll="libstubborn.so" name="FMOD_Studio_System_Create"		target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_System_Initialize"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_System_SetListenerAttributes"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_System_Update"		target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_System_LoadBankFile"		target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_System_GetVCA"		target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_VCA_SetVolume"		target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_VCA_GetVolume"		target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_System_GetEvent"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventDescription_LoadSampleData"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventDescription_CreateInstance"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventDescription_Is3D"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventInstance_Start"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_System_GetBus"		target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_Bus_SetPaused"		target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_Bus_GetPaused"		target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventInstance_GetDescription"	target="int_0"/>
		<!-- Celeste needs a specific value for 2 variables -->
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventDescription_GetPath"	target="int_celeste_event"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_Bank_LoadSampleData"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventInstance_SetVolume"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_System_GetListenerAttributes"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventInstance_Set3DAttributes"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventInstance_Release"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventInstance_GetVolume"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventInstance_Stop"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventInstance_Get3DAttributes"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_System_Release"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventInstance_SetParameterValue"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventDescription_IsOneshot"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventInstance_SetPaused"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventInstance_TriggerCue"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_Bus_StopAllEvents"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventInstance_GetPaused"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventInstance_GetPlaybackState"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_System_GetLowLevelSystem"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventDescription_GetInstanceCount"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventDescription_UnloadSampleData"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_Bus_LockChannelGroup"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_System_FlushCommands"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_Bus_GetChannelGroup"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_Studio_EventInstance_SetCallback"	target="int_0"/>
	</dllmap>
	<dllmap dll="fmodex">
		<dllentry dll="libstubborn.so" name="FMOD_System_Create"			target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_System_GetVersion"			target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_System_Init"				target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_System_SetReverbProperties"		target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_System_Update"			target="int_0"/>
	</dllmap>

	<dllmap dll="uP2P.dll">
		<dllentry dll="libstubborn.so" name="libuP2P_liaison_init"		target="int_1"/>
		<dllentry dll="libstubborn.so" name="libuP2P_hook"		target="int_0"/>
		<dllentry dll="libstubborn.so" name="libuP2P_part_read"		target="int_0"/>
		<dllentry dll="libstubborn.so" name="libuP2P_part"		target="int_0"/>
		<dllentry dll="libstubborn.so" name="libuP2P_sync_zero"		target="int_0"/>
		<dllentry dll="libstubborn.so" name="libuP2P_persona_rich"		target="int_0"/>
		<dllentry dll="libstubborn.so" name="libuP2P_liaison_poll"		target="int_0"/>
		<dllentry dll="libstubborn.so" name="libuP2P_fake"		target="int_0"/>
		<dllentry dll="libstubborn.so" name="libuP2P_take"		target="int_0"/>
		<dllentry dll="libstubborn.so" name="libuP2P_liaison_exit"		target="int_0"/>
	</dllmap>

	<dllmap dll="fmod">
		<dllentry dll="libstubborn.so" name="FMOD_System_GetVersion"		target="int_fmf_getversion"/>
		<dllentry dll="libstubborn.so" name="FMOD_System_SetDSPBufferSize"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_System_SetAdvancedSettings"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_System_SetSoftwareChannels"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_ChannelGroup_SetVolume"	target="int_0"/>
		<dllentry dll="libstubborn.so" name="FMOD_ChannelGroup_SetPitch"	target="int_0"/>
	</dllmap>

	<!-- PhotonBridge: Unrailed! -->
	<dllmap dll="PhotonBridge">
		<dllentry dll"libstubborn.so" name="init"		target="int_1"/>
		<dllentry dll"libstubborn.so" name="Init"		target="int_1"/>
	</dllmap>

</configuration>
EOF
			fi
		fi
	fi
}

libraryname()
{
        version="$1"
	if [ ! -e "$gamedir/$version" ]; then
		debug_echo "\nCouldn't find library directory $gamedir/$version"
	else
		debug_echo "\nEntering library directory $gamedir/$version"
		for file in $(ls "$gamedir/$version"); do
			# sort out libs that need to be ignored
			validlib $file
			if [ $? -eq 1 ]; then
				debug_echo "\tignored file: $file"
				continue
			fi
			debug_echo -n "\tfound library file: $file"
			file=$(trunklibnam "$file")
			debug_echo -n " -> $file"
			inarray $file ${needlibarray}
			if [ $? -eq 0 ]; then
				debug_echo " - already in array"
			elif [ $? -eq 1 ]; then
				needlibarray="$needlibarray$file "
				debug_echo ""
			else
				echo "\n\t - ERROR: inarray returned with unexpected error\n"
				exit 1
			fi
		done
		debug_echo "Done with library directory $gamedir/$version"
	fi
}

check_remove_steamworks()	# check if Steamworks.NET.dll is present, move it away if stub is in $monopath
{
	# FIXME: likely not whitespace-safe
	if [ -e "$gamedir/Steamworks.NET.dll" \
		-a -n "$monopath" -a -n "$(ls $(echo "$monopath" | tr -s ':' ' ') | grep -m 1 "Steamworks\.NET\.dll")" ]
	then
		if $(ls $(echo "$monopath" | tr -s ':' ' ') | grep -q "Steamworks\.NET\.dll"); then
			debug_echo "\nFound Steamworks.NET.dll in gamedir and in monopath, moving it out of gamedir"
			mkdir -p "$gamedir/fnaify-backup"
			mv "$gamedir/Steamworks.NET.dll" "$gamedir/fnaify-backup/"
		fi
	fi
}

# install FNA into gamedir; specify version (e.g. 17.12) as $1
# if XNA bridge should be installed, add "xna_bridge" as $2
install_fna()
{
	if [ $# -lt 1 ]; then
		echo "ERROR: install_fna called with insufficient arguments"
		exit 1
	fi
	fna_version=
	if [ "${1}" = 'latest' ]; then
		# get version number of latest release from GitHub API
		fna_version=$(ftp -Vo - https://api.github.com/repos/FNA-XNA/FNA/releases/latest \
			| grep -Eo "\"tag_name\"\:\"[0-9\.]*\"" \
			| cut -d\" -f4)
	else
		fna_version="$1"
	fi
	echo "\nInstalling FNA ..."
	licenses="${licenses}FNA:\t\tMs-PL (https://github.com/FNA-XNA/FNA/blob/master/licenses/LICENSE)${newline}"
	lastdir="$PWD"
	cd /tmp
	ftp -V https://github.com/FNA-XNA/FNA/releases/download/${fna_version}/FNA-$(echo $fna_version | tr -d '.').zip
	debug_echo "extracting FNA ${fna_version}"
	unzip FNA-$(echo $fna_version | tr -d '.').zip > /dev/null
	if [ \( $# -gt 1 \) -a \( x$2 = 'xxna_bridge' \) ]; then
		echo "\nInstalling FNA.NetStub for XNA ..."
		licenses="${licenses}FNA.NetStub:\tMs-PL (https://github.com/FNA-XNA/FNA.NetStub/blob/master/LICENSE)${newline}"
		ftp -V https://github.com/FNA-XNA/FNA.NetStub/archive/$netstub_commit.tar.gz
		tar zxf $netstub_commit.tar.gz
		mv FNA.NetStub-$netstub_commit FNA.NetStub
		echo -n "compiling XNA ABI/bridge files. This may take a moment... "
		xbuild FNA/abi/Microsoft.Xna.Framework.sln >> /tmp/fnaify-xbuild.log
		echo "done."
		cp /tmp/FNA/abi/bin/Debug/* "$gamedir/"
	else
		echo -n "compiling FNA ${fna_version} with xbuild... "
		xbuild FNA/FNA.sln >> /tmp/fnaify-xbuild.log
		debug_echo "done."
		echo "Moving FNA.dll to fnaify-backup subdirectory"
		mkdir -p "$gamedir/fnaify-backup"
		mv "$gamedir/FNA.dll" "$gamedir/fnaify-backup/"
		cp /tmp/FNA/bin/Debug/FNA.dll "$gamedir"
	fi
	debug_echo "removing the temporary build directory for FNA and returning to previous directory"
	rm -rf /tmp/FNA /tmp/FNA.NetStub
	cd "$lastdir"
}

check_nlog()
{
	if [ -f "$gamedir/NLog.dll" ] ; then
		nlogversion=`monodis --assembly "$gamedir/NLog.dll" | grep "Version" | tr -d [:alpha:] | tr -d " " | tr -d \:`
		nlogmajor=`echo "$nlogversion" | sed -n -E "s/\..*//p"`
		nlogminor=`echo "$nlogversion" | sed -n -E "s/[0-9]+\.([0-9]+)\.[0-9]+\.[0-9]+/\1/p"`
		debug_echo -n "\tNLog.dll version $nlogversion, "
		debug_echo -n "major: $nlogmajor, "
		debug_echo "minor: $nlogminor"
		if [ \( $nlogmajor -lt 4 \) -a \( "x$interaction" = "xi" \) ] ; then
			echo -n "\nInstall NLog 4.6.5 from www.nuget.org? [y/n] "
			response=
			until [ \( "x$response" = "xy" \) -o \( "x$response" = "xn" \) ]
			do
				read response
			done
		elif [ \( $nlogmajor -lt 4 \) -a \( "x$interaction" = "xy" \) ] ; then
			response="y"
		else
			response="n"
		fi
		if [ "x$response" = "xy" ] ; then
			debug_echo "Moving old NLog.dll out of the way"
			mkdir -p "$gamedir/fnaify-backup"
			mv "$gamedir/NLog.dll" "$gamedir/fnaify-backup/"
			lastdir="$PWD"
			mkdir /tmp/nlog
			cd /tmp/nlog
			echo "\nInstalling NLog 4.6.5 ..."
			licenses="${licenses}NLog:\tBSD 3-clause (https://github.com/NLog/NLog/blob/master/LICENSE.txt)${newline}"
			ftp -Vo nlog.4.6.5.nupkg https://www.nuget.org/api/v2/package/NLog/4.6.5
			unzip nlog.4.6.5.nupkg > /dev/null
			cp lib/net45/NLog.dll "$gamedir/"
			cd "$lastdir"
			rm -rf /tmp/nlog
		elif [ $nlogmajor -lt 4 ] ; then
			nlog_warning=1
		fi
	fi
}

process_options()
{
	while getopts c:d:him:Vvy o; do
		case "$o" in
			c) gameconfig="$OPTARG" ;;
			d) depdir="$OPTARG" ;;
			h) echo "$USAGE"; exit 0;;
			i) interaction=i ;;
			m) monopath="$OPTARG" ;;
			V) echo "$FNAIFY_VERSION"; exit 0;;
			v) FNAIFY_DEBUG=1 ;;
			y) interaction=y ;;
			--) break ;;
		esac
	done
	debug_echo "mode:		$mode"
	debug_echo "options:	$*\n"
	shift $(($OPTIND-1))
	if [ -n "$1" ] ; then
		if [ $# -gt 1 ] ; then
			echo "ERROR: too many arguments"
			echo "$USAGE"
			exit 1
		fi
		gamedir=$(readlink -f "$1")
	fi
}

check_mono_binaries()
{
	debug_echo "Checking mono and monodis"
	if [ -z "$FNAIFY_MONO" ]; then
		FNAIFY_MONO="mono"
	fi
	"$FNAIFY_MONO" --version 2>/dev/null >/dev/null
	if [ "$?" -gt 0 ]; then
		echo "error calling mono - aborting... Please make sure that mono is in path or set it in FNAIFY_MONO environment variable!"
		exit 1
	fi
	# check if monodis can be called
	monodis 2>/dev/null
	if [ "$?" -eq 127 ]; then
		echo "error calling monodis - aborting... Please make sure that monodis is in the PATH!"
		exit 1
	fi
}

iomap()
{
	debug_echo "iomap: checking if symlinks for filename cases need to be created"
	if [ -n "$(ls "$gamedir" | grep -m 1 "Dead Pixels.exe")" ] ; then
		ln -sf Sprites Content/sprites
		ln -sf Effects Content/Sprites/effects
		ln -sf Splash Content/Sprites/splash
		ln -sf Items Content/Sprites/InGame/items
		ln -sf Grenades Content/Sprites/InGame/grenades
		ln -sf Hud Content/Sprites/InGame/hud
		ln -sf insideBuildings Content/Sprites/InGame/InsideBuildings
		ln -sf Character Content/Sprites/InGame/character
		ln -sf City Content/Sprites/InGame/city
		ln -sf Traders Content/Sprites/InGame/traders
		ln -sf Zombies Content/Sprites/InGame/zombies
		ln -sf Objects Content/Sprites/InGame/objects
		ln -sf Other Content/Sprites/InGame/other
		ln -sf GunShots Content/Sprites/InGame/gunShots
		ln -sf Buttons Content/Sprites/buttons
		ln -sf Menu Content/Sprites/menu
		ln -sf Cursor Content/Sprites/cursor
		ln -sf Achievements Content/Sprites/achievements
		ln -sf Credits Content/Sprites/credits
		ln -sf Font Content/Sprites/font
		ln -sf preview Content/Sprites/Preview
		ln -sf preview Content/Sprites/Menu/Preview
		ln -sf PsxButtons Content/Sprites/buttons/psxButtons
		ln -sf Cutscene Content/Sprites/CutScene
		ln -sf buildings Content/Sprites/InGame/City/Buildings
		ln -sf mainbackground.xnb Content/ConfigSprites/mainBackground.xnb
		ln -sf largeCuts.xnb Content/Sprites/effects/largecuts.xnb
		ln -sf smallCuts.xnb Content/Sprites/effects/smallcuts.xnb
		ln -sf effects Content/Sprites/Effects
		ln -sf cuemark.xnb Content/Sprites/effects/cueMark.xnb
		ln -sf Static.xnb Content/Sprites/Menu/Preview/static.xnb
	elif [ -n "$(ls "$gamedir" | grep -m 1 "AJ1.exe")" ] ; then
		ln -sf j_rip.xnb Content/AJ1/j_Rip.xnb
		ln -sf j_rip.xnb Content/AJ2/j_Rip.xnb
		ln -sf Owlturnneo2.xnb Content/AJ1/owlturnneo2.xnb
		ln -sf Owlturnneo2.xnb Content/AJ2/owlturnneo2.xnb
	elif [ -n "$(ls "$gamedir" | grep -m 1 "CSTW.exe")" ] ; then
		ln -sf paws_Happy.xnb Content/Portrait/Paws/Paws_Happy.xnb
	elif $(ls "$gamedir" | grep -qm 1 ThePit); then
		ln -sf UI Content/ui
	elif [ -n "$(ls "$gamedir" | grep -m 1 "Grand Class Melee.exe")" ] ; then
		ln -sf water.xnb Content/Sounds/Water.xnb
		ln -sf grass.xnb Content/Sounds/Grass.xnb
		ln -sf move.xnb Content/Sounds/Move.xnb
		ln -sf select.xnb Content/Sounds/Select.xnb
		ln -sf back.xnb Content/Sounds/Back.xnb
		ln -sf squire_base.xnb Content/Textures/Players/Squire_base.xnb
		ln -sf squire_greyscale.xnb Content/Textures/Players/Squire_greyscale.xnb
		ln -sf militia_base.xnb Content/Textures/Players/Militia_base.xnb
		ln -sf militia_greyscale.xnb Content/Textures/Players/Militia_greyscale.xnb
		ln -sf apprentice_base.xnb Content/Textures/Players/Apprentice_base.xnb
		ln -sf apprentice_greyscale.xnb Content/Textures/Players/Apprentice_greyscale.xnb
		ln -sf savant_base.xnb Content/Textures/Players/Savant_base.xnb
		ln -sf savant_greyscale.xnb Content/Textures/Players/Savant_greyscale.xnb
		ln -sf sword.xnb Content/Textures/Weapons/Sword.xnb
		ln -sf arrow.xnb Content/Sounds/Arrow.xnb
		ln -sf scorch.xnb Content/Sounds/Scorch.xnb
		ln -sf bigspeed.xnb Content/Sounds/Bigspeed.xnb
		ln -sf frame_ingame_left_ruin.xnb Content/Textures/Menu/frame_ingame_left_Ruin.xnb
		ln -sf frame_ingame_left_mire.xnb Content/Textures/Menu/frame_ingame_left_Mire.xnb
		ln -sf frame_ingame_right_ruin.xnb Content/Textures/Menu/frame_ingame_right_Ruin.xnb
		ln -sf frame_ingame_left_wood.xnb Content/Textures/Menu/frame_ingame_left_Wood.xnb
		ln -sf ruin_leaf.xnb Content/Textures/Terrain/Ruin_leaf.xnb
		ln -sf frame_ingame_right_wood.xnb Content/Textures/Menu/frame_ingame_right_Wood.xnb
		ln -sf bigblow1.xnb Content/Sounds/Bigblow1.xnb
		ln -sf ruin_grassmove.xnb Content/Textures/Terrain/Ruin_grassmove.xnb
		ln -sf wood_leaf.xnb Content/Textures/Terrain/Wood_leaf.xnb
		ln -sf ruin_watermove.xnb Content/Textures/Terrain/Ruin_watermove.xnb
		ln -sf castshort.xnb Content/Sounds/Castshort.xnb
		ln -sf frame_ingame_right_mire.xnb Content/Textures/Menu/frame_ingame_right_Mire.xnb
		ln -sf frame_ingame_left_dune.xnb Content/Textures/Menu/frame_ingame_left_Dune.xnb
		ln -sf sword1.xnb Content/Sounds/Sword1.xnb
	elif [ -n "$(ls "$gamedir" | grep -m 1 "LaserCat.exe")" ] ; then
		ln -sf audio Content/Audio
	elif [ -n "$(ls "$gamedir" | grep -m 1 "MountYourFriends.exe")" ] ; then
		ln -sf menuBg.xnb Content/images/menubg.xnb
		ln -sf humanClean.xnb Content/images/humanclean.xnb
		ln -sf humanCleanNorm.xnb Content/images/humancleannorm.xnb
		ln -sf menuMarker.xnb Content/images/menumarker.xnb
		ln -sf stegersaurusLogo.xnb Content/images/backdrops/stegersauruslogo.xnb
		ln -sf UIComponents.xnb Content/images/uicomponents.xnb
		ln -sf restrictedArea.xnb Content/images/restrictedarea.xnb
		ln -sf goatSheet.xnb Content/images/goatsheet.xnb
		ln -sf BP3_SSTRIP_64.xnb Content/images/bp3_sstrip_64.xnb
		ln -sf BP3_SSTRIP_32.xnb Content/images/bp3_sstrip_32.xnb
		ln -sf keySheet.xnb Content/images/keysheet.xnb
	elif [ -n "$(ls "$gamedir" | grep -m 1 "One Finger Death Punch.exe")" ] ; then
		ln -sf font2.xnb Content/Font2.xnb
		ln -sf font5.xnb Content/Font5.xnb
		ln -sf font6.xnb Content/Font6.xnb
	elif [ -n "$(ls "$gamedir" | grep -m 1 "PhoenixForce")" ] ; then
		ln -sf LIfeBar.xnb Content/1.4/Boss/lifeBar.xnb
		ln -sf firewavexml.xml Content/1.4/Player/fireWavexml.xml
		ln -sf firewave.xnb Content/1.4/Player/fireWave.xnb
	elif [ -n "$(ls "$gamedir" | grep -m 1 "Streets of Fury EX")" ] ; then
		ln -sf ShockWave.xnb Content/Texture2D/Shockwave.xnb
	else
		debug_echo "\tiomap: nothing to do"
	fi
}

# check if this is an XNA game, otherwise abort
xnasetup()
{
	if [ -d "/usr/local/share/fnaify/XNA-bridge" ];then
		monopath="${monopath}:/usr/local/share/fnaify/XNA-bridge"
	else
		if [ "x$interaction" = "xi" ] ; then
			echo -n "\nInstall FNA files from GitHub to for this XNA application? [y/n] "
			response=
			until [ \( "x$response" = "xy" \) -o \( "x$response" = "xn" \) ]
			do
				read response
			done
		elif [ "x$interaction" = "xy" ] ; then
			response="y"
		else
			response="n"
		fi

		if [ "$response" = "y" ]; then
			install_fna latest xna_bridge
		else
			echo "Failed to install FNA/XNA files. Try running with -i or -y flag\n"
			exit 1
		fi
	fi
	
	# convert .wma to .ogg and .wmv to .ogv
	# https://gist.github.com/flibitijibibo/c97bc14aab04b1277d8ef5e97fc9aeff
	IFS="
"
	# FIXME: check for errors on return of these commands
	echo -n "checking for WMA/WMV files and converting. This may take several minutes..."
	for afile in $(find "$gamedir" -name "*.wma"); do
		echo "converting $afile to OGG"
		ffmpeg -loglevel fatal -i "$afile" -c:a libvorbis -q:a 10 \
			"$(echo "$afile" | rev | cut -d. -f2-$(($(echo "$afile" \
			| tr -dc '.' | wc -c) + 1)) | rev).ogg"
	done
	for vfile in $(find . -name "*.wmv"); do
		echo "converting $vfile to OGV"
		ffmpeg -loglevel fatal -i "$vfile" -c:v libtheora -q:v 10 -c:a libvorbis \
			-q:a 10 "$(echo "$vfile" | rev | cut -d. -f2-$(($(echo "$vfile" \
			| tr -dc '.' | wc -c) + 1)) | rev).ogv"
	done
	IFS=$SAVEIFS
	echo " done."
}

get_frameworkfile()
{
	if [ -e "$gamedir/FNA.dll" ]; then
		frameworkfile="FNA.dll"
	elif [ -e "$gamedir/MonoGame.Framework.dll" ]; then
		frameworkfile="MonoGame.Framework.dll"
	fi
}

get_frameworkversion()
{
	[ -z "$frameworkfile" ] && return	# either no framework file, or need to run get_frameworkfile() first
	frameworkversion="$(monodis --assembly "$frameworkfile" | fgrep Version | sed -E 's/Version:[[:blank:]]*//')"
	frameworkmajor=`echo "$frameworkversion" | sed -n -E "s/([0-9]+)\.[0-9]+\.[0-9]+\.[0-9]+/\1/p"`
	frameworkminor=`echo "$frameworkversion" | sed -n -E "s/[0-9]+\.([0-9]+)\.[0-9]+\.[0-9]+/\1/p"`
}

###################################
### MODES: help, run, setup	###
###################################

help()
{
	echo "$USAGE"
	exit 0
}

run()
{
	process_options $@
	[ -e "$gamedir/.fnaify_ready" ] || { echo "Run 'fnaify setup' first."; exit 1; }
	check_mono_binaries
	cd "$gamedir"

	IFS="
"
	for xfile in $(cd "$gamedir" && find . -maxdepth 1 -type f -iname "*.exe" | cut -f 2 -d "/" | sort); do
		exefile="$exefile$xfile:"
		nexefile=$((nexefile + 1))
	done
	IFS=$SAVEIFS
	selectexe

	# Quirks
	case "$my_exe" in
		Blueberry.exe|Shenzhen.exe|ThePit.exe|Terraria.exe)
			exe_env="${exe_env}MONO_FORCE_COMPAT=1 "					;;
		Hacknet.exe)				exe_flags="${exe_flags}-disableweb "		;;
		ScourgeBringer.exe)			exe_flags="${exe_flags}-noSound "		;;
	esac

	# format all relevant command variables
	depdir="$(echo "$depdir" | sed -E 's/:$//')"
	monopath="$(echo "$monopath" | sed -E 's/:$//' | sed -E 's/^://')"
	get_frameworkfile
	get_frameworkversion
	gameconfigsymlink="${frameworkfile}.config"
	check_gameconfig
	[ -e $gameconfig ] || { echo "ERROR: provided gameconfig file not existant: $gameconfig"; exit 1; }
	debug_echo "gameconfig: $gameconfig"
	echo "existing symlink target: $gameconfigsymlink -> $(readlink "$gameconfigsymlink")"
	[ "x$gameconfig" = "x$(readlink "$gameconfigsymlink")" ] \
		&& debug_echo "existing symlink ok" \
		|| ln -sf "$gameconfig" "$gameconfigsymlink"
	my_exe="$(echo "$my_exe" | tr -d '\:')"

	echo
	printdash "fnaify runtime configuration"
	echo "Game Directory:			$PWD"		# PWD as cd'd into $gamedir happened above
	echo "Mono Binary:			$FNAIFY_MONO"
	echo "Mono Path:			$monopath"
	echo "Native Library Directories:	$depdir"
	echo "Framework File:			$frameworkfile"
	echo "Framework File Version:		$frameworkversion"
	echo "Symlink to Config:		$gameconfigsymlink"
	echo "Config File:			$gameconfig"
	echo "Other Runtime Environment:	$exe_env"
	echo "Runtime Flags:			$exe_flags"

	echo -n "\nNOTE: if game should unexpectedly fail to start, make sure datasize limit is high enough. "
	echo "AT LEAST 2G are recommended for most games. See ksh(1) for ulimit command documentation"
	echo

	# check if broken symlinks exist in the game directory, e.g. libdl.so.2
	for l in $(find . -type l); do
		if [ ! -e "$l" ] ; then
			newl="$(latest_syslib "$(trunklibnam "$(readlink $l)")")"
			if [ -z "$newl" ] ; then
				echo "ERROR - broken symlink: $l. Expect trouble."
			else
				ln -fs "$newl" "$l"
			fi
		fi
	done

	LD_LIBRARY_PATH="$depdir" MONO_PATH="$monopath" $exe_env exec "$FNAIFY_MONO" "$my_exe" $exe_flags \$*

	exit 0
}

setup()
{
	process_options $@
	check_mono_binaries
	cd "$gamedir"
	debug_echo "gamedir: $PWD"	# cd'd into direct above

	get_frameworkfile
	debug_echo "framework file:		$frameworkfile"
	get_frameworkversion
	debug_echo "framework version:	$frameworkversion"

	if [ -z "$frameworkfile" ] ; then
		# games without framework files:
		# Atom Zombie Smasher, Eliza, Molek-Syntez, Exapunks, Opus Magnum (Lightning.exe),
		# Shenzhen I/O, SpaceChem (64bit and fullscreen update from 2020-07-15), Streets of Fury EX
		if [ -n "$(ls "$gamedir" | grep -m 1 "AtomZombieSmasher\.exe")" ] ; then
			if $(ls $(echo "$depdir" | tr -s ':' ' ') | grep -q "libatomstb\.so")
			then
				debug_echo "\tfound libatomstb library in a library directory"
			else
				# add libatomstb to needlibarray
				inarray libatomstb.so $needlibarray
				if [ $? -eq 1 ]; then
					needlibarray="${needlibarray}libatomstb.so "
					debug_echo "\tlibatomstb.so added to array"
				fi
			fi
		elif [ \( -n "$(ls "$gamedir" | grep -im 1 "eliza.exe")" \) \
			-o \( -n "$(ls "$gamedir" | grep -im 1 "molek-syntez.exe")" \) \
			-o \( -n "$(ls "$gamedir" | grep -im 1 "exapunks.exe")" \) \
			-o \( -n "$(ls "$gamedir" | grep -im 1 "lightning.exe")" \) \
			-o \( -n "$(ls "$gamedir" | grep -im 1 "shenzhen.exe")" \) \
			-o \( -n "$(ls "$gamedir" | grep -im 1 "spacechem.exe")" \) \
			] ; then
			debug_echo "\nCompatible game without XNA/FNA framework file found."
			debug_echo 'Creating $HOME/Desktop directory which is needed for Zachtronics games'
			mkdir -p "$HOME/Desktop"
		else
			check_nlog	# TODO: why is this done here?? because it's not in xnasetup()??
			found_xna=0
			IFS='
		'
			for f in $(find . -maxdepth 1 -type f -iname "*.exe" -o -iname "*.dll" -exec file {} \; \
				| fgrep "Mono/.Net assembly"); do
				f="$(echo $f | cut -d : -f 1)"
				debug_echo "Checking $f for XNA"
				[ -n "$(monodis --assemblyref "$f" 2>&1 | grep -im 1 "Microsoft.Xna.Framework")" ] \
					&& { found_xna=1; break; }
			done
			IFS=$SAVEIFS
			[ $found_xna -eq 1 ] \
				&& { debug_echo "Found XNA reference"; xnasetup; } \
				|| { echo "No FNA, MonoGame or XNA reference found"; exit 1; }
		fi
	fi

	if [ "x$frameworkfile" = "xFNA.dll" ] && ( [ $frameworkmajor -lt 16 ] || ( [ $frameworkmajor -eq 16 ] && [ $frameworkminor -lt 5 ] ) )
	then
		fna_warning=1
	fi

	check_nlog

	set -A configfilesarray		# empty the array
	nconfigfilesarray=0		# TODO: is this really needed?
	debug_echo "Identifying config files..."
	IFS="
"
	for cfile in $(ls "$gamedir" | grep "\.config$"); do
		debug_echo "\tfound config file: $cfile"
		configfilesarray[$((${#configfilesarray[*]} + 1))]="$cfile"
		nconfigfilesarray=$((nconfigfilesarray + 1))
	done
	IFS=$SAVEIFS
	debug_echo "Done identifying config files.\n"

	# identify required libraries in .config files and lib{,64} directories
	# FIXME: filenames not whitespace-safe (but should not be used in such files anyway)
	printdash $(debug_echo "Identifying libraries required by the game...")

	#for MidBoss, add SDL2_image_compact to needlib
	MidBoss=0
	ls "$gamedir" | grep -iqm 1 "midboss"
	if [ $? -eq 0 ]; then
		MidBoss=1
		needlibarray="${needlibarray}libSDL2_image_compact.so "
	fi

	libraryname "lib64"
	libraryname "lib"
	libraryname "x64"
	libraryname "x86"

	debug_echo "Obtaining library names from the following config files"
	if [ $nconfigfilesarray -lt 1 ]; then
		debug_echo "No config files found."
	else
		cfile=""
		IFS="
"
		for cfile in ${configfilesarray[@]}; do
			IFS=$SAVEIFS
			debug_echo "\t$cfile"
			linuxlines=$(grep "os\=\"linux" "$gamedir/$cfile")
			for libstring in $(echo "$linuxlines" | sed -n -E "s/.*target=\"([^\"]+).*/\1/p"); do
				# Fix where library name includes directory information
				libstring=$(echo "$libstring" | sed -E 's/^.\///')
				# remove directories at the start of lib name
				libstring=$(echo "$libstring" | sed -E 's/^.*\///')
				debug_echo -n "\t\tFound library string: $libstring"
				# sort out libs that need to be ignored
				validlib $libstring
				if [ $? -eq 1 ]; then
					debug_echo " - ignored"
					continue
				fi
				libstring=$(trunklibnam "$libstring")
				debug_echo -n " -> $libstring"
				# add to libstring to needlibarray if not in there yet
				inarray $libstring $needlibarray
				if [ $? -eq 0 ]; then
					debug_echo " - already in array"
				elif [ $? -eq 1 ]; then
					needlibarray="$needlibarray$libstring "
					debug_echo " - added to array"
				else
					echo "\n\t - ERROR: inarray returned with unexpected error\n"
					exit 1
				fi
			done
		done
		debug_echo "Done with identifying libraries in config files"
	fi
	debug_echo "Done with identification of needed libraries."

	debug_echo -n "Fixing libpng filenames if present..."
	needlibarray=$(echo "${needlibarray}" | sed -E "s/(libpng)..(\.so.*)/\1\2/")
	debug_echo " done.\n"

	# Check if the libraries are available on the system (/usr/local/lib).
	# If not, break and inform user which libraries need to be installed.
	echo -n "Checking installed libraries... "
	debug_echo ""

	# missinglibs[*] accumulates missing library names to inform user
	missinglibs=""
	for needlib in ${needlibarray}; do
		if $(ls $(echo "$depdir" | tr -s ':' ' ') | grep -q "$needlib")
		then
			IFS=$SAVEIFS
			debug_echo "\tfound library for: $needlib"
		else
			IFS=$SAVEIFS
			debug_echo "\tNot found: $needlib"
			missinglibs="$missinglibs$needlib "
		fi
	done
	echo "done.\n"

	if [ -n "${missinglibs}" ]; then
		echo "\nCould not find the following libraries:\n
		${missinglibs}\n"
		exit 1
	fi

	# identify all .config files that do dllmap and move out of the way
	debug_echo 'moving .config files with dllmap out of the way'
	if [ ! -d "$gamedir/fnaify-backup" ] ; then	# FIXME: is this check needed?
		mkdir -p "$gamedir/fnaify-backup"
	fi
	IFS="
"
	for config_file in ${configfilesarray[@]}; do
		IFS=$SAVEIFS
		if $(grep -q "dllmap" "$config_file"); then
			mv "$config_file" "$gamedir/fnaify-backup/"
		fi
	done

	if [ -n "$(ls "$gamedir" | grep -m 1 "MidBoss.exe")" ] ; then
		debug_echo 'creating MidBoss.exe.config for MidBoss'
		cat <<EOF > "$gamedir/MidBoss.exe.config"
<?xml version="1.0" encoding="utf-8"?>
<configuration>
	<dllmap dll="SDL2_image.dll" target="libSDL2_image_compact.so"/>
</configuration>
EOF
	fi

	debug_echo "Moving some bundled dll files into fnaify-backup subfolder... "
	for file in $monofilearray; do
		if [ -e "$gamedir/$file" ]; then
			debug_echo "\tFound bundled mono file: $file"
			mkdir -p "$gamedir/fnaify-backup"
			mv "$gamedir/$file" "$gamedir/fnaify-backup/"
		fi
	done
	debug_echo " done."

	# if necessary, replace FNA.dll
	fna_replace=""
	lastdir=""
	if [ $fna_warning -eq 1 ]; then
		if [ "x$interaction" = "xi" ] ; then
			echo "\nWARNING: version of FNA.dll potentially incompatble!"
			echo "Fetch FNA 17.12 from GitHub, compile, and replace bundled FNA.dll?"
			echo "FNA is distributed under Microsoft Public License. The license"
			echo "can be viewed here:"
			echo "https://github.com/FNA-XNA/FNA/blob/master/licenses/LICENSE"
			echo -n "Proceed with replacing FNA with version 17.12 (recommended)? [y/n] "
			until [ "$fna_replace" = "y" -o "$fna_replace" = "n" ]; do
				read fna_replace
			done
		elif [ "x$interaction" = "xy" ] ; then
			fna_replace="y"
		else
			fna_replace="n"
		fi

		if [ "$fna_replace" = "y" ]; then
			install_fna 17.12
			fna_warning=0
		fi
	fi

	check_remove_steamworks
	symlink_mg_libs
	iomap

	if [ -n "${licenses}" ]; then
		echo "Installed modules are under the following license(s):\n"
		echo "${licenses}"
	fi
	if [ $fna_warning -eq 1 ]; then
		echo "\nWARNING: version of FNA.dll potentially incompatible!"
		echo "If the game doesn't run, try running 'fnaify -i' (or 'fnaify -y').\n"
	fi
	if [ $nlog_warning -eq 1 ]; then
		echo "\nWARNING: version of NLog.dll potentially incompatible!"
		echo "If the game doesn't run, try running 'fnaify -i' (or 'fnaify -y').\n"
	fi

	touch .fnaify_ready

	exit 0
}

###	END OF VARIABLES AND FUNCTIONS	###

###################
###	MAIN	###
###################

mode="$1"
case "$mode" in
	setup)	shift; setup $@	;;
	run)	shift; run $@ ;;
	help)	echo "$USAGE"; exit 0;;
	*)	process_options $@; echo "$USAGE"; exit 0;
esac

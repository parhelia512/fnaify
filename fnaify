#!/usr/bin/env ksh

#########################################################################
# fnaify 2.3								#
# ===============							#
#									#
# Run FNA/XNA games on OpenBSD						#
#									#
# created 2017-12-27 by Thomas Frohwein (thfr)				#
# portability fixes by Mariusz Zaborski (oshogbo)			#
#									#
# FNA is a reimplementation of the Microsoft XNA Game Studio 4.0	#
# Refresh libraries.							#
# Thanks to the great work by Ethan Lee (flibitijibibo) games using FNA	#
# are highly portable and can even run on OpenBSD. Please refer to	#
# https://fna-xna.github.io/ for more information about FNA.		#
#									#
# License: ISC								#
#########################################################################

# TODO:
# - fix FIXMEs
# - check_nlog now only looks at major version number; is there a better way?
#   (it reports only major in 'monodis --assembly': 3.0.0.0, 4.0.0.0)
# - figure out how to do selection between AJ1.exe and AJ2.exe for Apple Jack
# - fails to detect XNA in Streets of Fury EX because of whitespace; resolved after renaming .exe
# - update the creator for dllmap file; based on fnaify.dllmap.config
# - pick FNA version with better performance than 17.12

USAGE="\nUsage: `basename $0` [-i|-y] [-hv] [-c <configfile>] [-d <depdir>] [-m <monopath>] [<gamedir>]\n\
\n\
-c: specify config file for dllmap (optional)\n\
-d: replace directories for finding dependencies\n\
    NOTE: separate multiple entries with ':' (default:
    /usr/local/share/fnaify-libs:/usr/local/lib:/usr/X11R6/lib)\n\
-h: print usage information\n\
-i: interactive mode\n\
-m: add directories to MONO_PATH\n\
-y: non-interactive mode; automatically replies 'yes' to all recommended choices\n\
-v: verbose output\n\
\n\
<gamedir> is optional and defaults to the current directory if not specified.\n\
"

depdir="/usr/local/lib:/usr/X11R6/lib"	# /usr/X11R6/lib is location of libfreetype.so on OpenBSD
gamedir="$PWD"
interaction=n	# y|n|i: yes to all, no to all, interactive
libatomstb_commit=f8291c591d04ac304c4f5324163bc83287de77b7
licenses=
monoconfig=
monopath="${MONO_PATH}:"
netstub_commit=e7d890e0ede0caa9e76ef37af6070344e3ab0abf
newline='
'
scriptfile=

if [ -d "/usr/local/lib/steamworks-nosteam" ] ; then
	monopath="${monopath}/usr/local/lib/steamworks-nosteam:"
	depdir="/usr/local/lib/steamworks-nosteam:$depdir"
fi
if [ -d "/usr/local/share/steamstubs" ]; then
	monopath="${monopath}/usr/local/share/steamstubs:"
fi
if [ -d "/usr/local/share/fnaify-libs" ]; then
	depdir="/usr/local/share/fnaify-libs:$depdir"
fi

#list of exefiles and their number
exefile=
nexefile=0
my_exe=""	# the .exe selected for the launch script

exe_flags=""
exe_env=""

debug_echo()
{
	if [ -z "$FNAIFY_DEBUG" ]; then
		return
	fi
	if [ "${1}" = '-n' ]; then
		printf "$2"
	else
		printf "$1\n"
	fi
}

selectexe()
{
	# find correct .exe file for the wrapper script
	if [ $nexefile -gt 1 ]; then
		if [ "x$interaction" = "xi" ] ; then
			i=1
			while [ $i -le $nexefile ]; do
				echo "$i: $(echo $exefile | cut -f $i -d ':')"
				i=$((i + 1))
			done
			input_exe=0
			while [ \( $(echo "$input_exe" | wc -c) -gt 2 \) -o \( -z "$(echo "$input_exe" | grep [1-9])" \) -o \( $input_exe -gt $((i - 1)) \) ]; do
				echo -n "Enter number of .exe file to choose for wrapper script: "
				read input_exe
			done
			# NOTE: this only works for up to 9 candidate files
			my_exe="$(echo $exefile | cut -f $input_exe -d ':')"
		else
			# FIXME: for now just pick the first .exe. Come up with
			#        better heuristic (match directory or launch
			#        script name; pick .exe with shortest name ... ?
			my_exe="$(echo $exefile | cut -f 1 -d ':')"
		fi
	elif [ $nexefile -eq 1 ]; then
		my_exe="$exefile"
	else
		echo "ERROR: no .exe file found\n"
		exit 1
	fi
	my_exe="$(echo "$my_exe" | sed -E "s/[ \t]$//")" # trim trailing whitespace
}

run()
{
	monoconfig=/usr/local/share/fnaify/fnaify.dllmap.config

	while getopts c:d:hm:v o; do
		case "$o" in
			c) monoconfig="$2" ;;
			d) depdir="$2" ;;
			h) echo "$USAGE"; exit 0;;
			m) monopath="$2" ;;
			v) FNAIFY_DEBUG=1 ;;
			--) break ;;
		esac
	done
	shift $(($OPTIND-1))
	if [ -n "$1" ] ; then
		if [ $# -gt 1 ] ; then
			echo "ERROR: too many arguments"
			echo "$USAGE"
			exit 1
		fi
		gamedir=$(readlink -f "$1")
	fi

	debug_echo "gamedir: $gamedir"
	cd "$gamedir"
	debug_echo "Mode: run"

	debug_echo "Checking mono runtime"
	if [ -z "$FNAIFY_MONO" ]; then
		FNAIFY_MONO="mono"
	fi
	"$FNAIFY_MONO" --version 2>/dev/null >/dev/null
	if [ "$?" -gt 0 ]; then
		echo "error calling mono - aborting... Please make sure that mono is in path or set it in FNAIFY_MONO environment variable!"
		exit 1
	fi

	IFS="
	"
	for xfile in $(cd "$gamedir" && find . -maxdepth 1 -type f -iname "*.exe" | cut -f 2 -d "/" | sort); do
		exefile="$exefile$xfile:"
		nexefile=$((nexefile + 1))
	done
	IFS=$SAVEIFS
	selectexe

	# Quirks for the runtime invocation of some games
	case "$my_exe" in
		Blueberry.exe|Shenzhen.exe|ThePit.exe|Terraria.exe)
			exe_env="${exe_env}MONO_FORCE_COMPAT=1 "					;;
		Hacknet.exe)				exe_flags="${exe_flags}-disableweb "		;;
		ScourgeBringer.exe)			exe_flags="${exe_flags}-noSound "		;;
	esac

	set -x
	LD_LIBRARY_PATH="$(echo "$depdir" | sed -E 's/:$//')" MONO_PATH="$(echo "$monopath" | sed -E 's/:$//' | sed -E 's/^://')" MONO_CONFIG="$monoconfig" $exe_env exec "$FNAIFY_MONO" "$(echo "$my_exe" | tr -d '\:')" $exe_flags \$*
	set +x

	exit
}

if [ "$1" == "run" ] ; then
	shift
	run $@
fi

while getopts c:d:him:vy o; do
	case "$o" in
		c) monoconfig="$2" ;;
		d) depdir="$2" ;;
		h) echo "$USAGE"; exit 0;;
		i) interaction=i ;;
		m) monopath="$2" ;;
		v) FNAIFY_DEBUG=1 ;;
		y) interaction=y ;;
		--) break ;;
	esac
done
shift $(($OPTIND-1))
if [ -n "$1" ] ; then
	if [ $# -gt 1 ] ; then
		echo "ERROR: too many arguments"
		echo "$USAGE"
		exit 1
	fi
	gamedir=$(readlink -f "$1")
fi

debug_echo "gamedir: $gamedir"
cd "$gamedir"

if [ -z "$monoconfig" ] ; then
	if [ -f "$HOME/.config/fnaify/fnaify.dllmap.config" ] ; then
		monoconfig="$HOME/.config/fnaify/fnaify.dllmap.config"
		# check for outdated config file
		if [ "x$(cat "$monoconfig" | grep -m 1 "libstubborn")" = "x" ] ; then
			echo "WARNING: $monoconfig appears to be out of date. It is strongly recommended to remove it and re-run `basename $0`."
		fi
	else
		if [ -f "/usr/local/share/fnaify/fnaify.dllmap.config" ] ; then
			monoconfig="/usr/local/share/fnaify/fnaify.dllmap.config"
		else	# in this case create ~/.config/fnaify/fnaify.dllmap.config
			monoconfig="$HOME/.config/fnaify/fnaify.dllmap.config"
			debug_echo "creating $monoconfig"
			mkdir -p ~/.config/fnaify
			cat <<EOF > "$monoconfig"
<?xml version="1.0" encoding="utf-8"?>
<!-- mono config file for fnaify dllmaps -->
<configuration>
	<dllmap dll="FAudio" target="libFAudio.so"/>
	<dllmap dll="MojoShader.dll" target="libmojoshader.so"/>
	<dllmap dll="SDL2.dll" target="libSDL2.so"/>
	<!-- MidBoss needs libSDL2_image_compact.so -->
	<dllmap dll="SDL2_image.dll" target="libSDL2_image.so"/>
	<dllmap dll="SDL2_mixer.dll" target="libSDL2_mixer.so"/>
	<dllmap dll="SDL2_ttf.dll" target="libSDL2_ttf.so"/>
	<dllmap dll="SteamworksNative.dll" target="libSteamworksNative.so"/>
	<dllmap dll="freetype6" target="libfreetype.so" />
	<dllmap dll="freetype6.dll" target="libfreetype.so" />
	<dllmap dll="libtheorafile.dll" target="libtheorafile.so"/>
	<dllmap dll="libtheoraplay.dll" target="libtheoraplay.so"/>
	<dllmap dll="libvorbisfile.dll" target="libvorbisfile.so"/>
	<dllmap dll="openal32.dll" target="libopenal.so"/>
	<dllmap dll="soft_oal.dll" target="libopenal.so"/>

	<!-- Atom Zombie Smasher -->
	<dllmap dll="msvcr100.dll" target="libc.so"/>

	<!-- Terraria, Solaroids -->
	<dllmap dll="gdiplus.dll" target="libgdiplus.so"/>

	<!-- MidBoss -->
	<dllmap dll="i:cygwin1.dll" target="libc.so"/>
	<dllmap dll="libc" target="libc.so"/>
	<dllmap dll="intl" target="libc.so"/>
	<dllmap dll="libintl" target="libc.so"/>
	<dllmap dll="i:libxslt.dll" target="libxslt.so"/>
	<dllmap dll="i:odbc32.dll" target="libodbc.so"/>
	<dllmap dll="oci" target="libclntsh.so"/>
	<dllmap dll="db2cli" target="libdb2_36.so"/>
	<dllmap dll="MonoPosixHelper" target="libMonoPosixHelper.so"/>
	<dllmap dll="i:msvcrt" target="libc.so"/>
	<dllmap dll="i:msvcrt.dll" target="libc.so"/>
	<dllmap dll="sqlite" target="libsqlite.so"/>
	<dllmap dll="sqlite3" target="libsqlite3.so"/>
	<dllmap dll="libX11" target="libX11.so"/>
	<dllmap dll="libcairo-2.dll" target="libcairo.so"/>
	<dllmap dll="libcups" target="libcups.so"/>

	<!-- Nuclex.Input (Dead Pixels, Amazing Princess Sarah, Akane the Kunoichi -->
	<dllmap dll="kernel32">
		<dllentry dll="ld.so" name="LoadLibrary" target="dlopen"/>
	</dllmap>
</configuration>
EOF
		fi
	fi
fi

# Variables and Functions

SAVEIFS=$IFS
fna_warning=0
nlog_warning=0

# array of lib names to ignore for the configuration checking
ignoredarray="
FarseerPhysics.Portable.xml
libCommunityExpressSW.so
libCSteamworks.so
libGalaxy64.so
libGalaxyCSharpGlue.so
libGalaxy.so
libParisSteam.so
libSkiaSharp.so
libSteamWrapper.so
libXNAFileDialog.so
libXNAWebRenderer.so
libsteam_api.so
libcef.so
libfmod.so
libfmodstudio.so
libtiny_jpeg.so
steamwrapper.so
steam_appid.txt
"

# array of mono files that need to be removed from the game folder
monofilearray="
I18N.CJK.dll
I18N.MidEast.dll
I18N.Other.dll
I18N.Rare.dll
I18N.West.dll
I18N.dll
Microsoft.CSharp.dll
Mono.CSharp.dll
Mono.Posix.dll
Mono.Security.dll
System.Configuration.dll
System.Core.dll
System.Data.dll
System.Drawing.dll
System.IO.Compression.FileSystem.dll
System.IO.Compression.dll
System.Net.dll
System.Numerics.dll
System.Runtime.Serialization.dll
System.Security.dll
System.ServiceModel.dll
System.Web.Extensions.dll
System.Web.Http.dll
System.Web.Services.dll
System.Web.dll
System.Windows.Forms.dll
System.Xml.Linq.dll
System.Xml.dll
System.dll
WindowsBase.dll
libMonoPosixHelper.so.x86
libMonoPosixHelper.so.x86_64
monoconfig
monomachineconfig
mscorlib.dll
"

needlibarray="" # array that will hold the names of needed libraries

printdash()
{
	if [ -z "$*" ]; then
		return
	fi
	printf "$*\n"
	c=1
	dashes=
	while [ $c -lt $(echo "$*" | wc -c) ]
	do
		dashes="${dashes}-"
		# $((...)) for arithmetic substitution
		c=$((c+1))
	done
	echo "$dashes"
}

inarray() # check if $1 is in array $2
{
	firstarg="$1"
	shift 1
	echo "$*" | grep -q "$firstarg"
}

validlib() # returns 1 if $1 is in ignoredarray, otherwise 0
{
	libnam="$(trunklibnam $1)"
	if [ -n "$(echo \"$ignoredarray\" | grep $libnam)" ]; then
		return 1
	elif [ -n "$(echo \"$libnam\" | grep '\.dll[ \t]*')" ]; then
		return 1
	else
		return 0
	fi
}

trunklibnam() # truncate library name
{
	libnam="$1"
	libnam="$(echo "$libnam" | sed -n -E "s/[\.0-9]*$//p")"
	echo "$libnam" | sed -E "s/(libSDL2[^-]*)-2\.0(\.so.*)/\1\2/"
}

libraryname()
{
        version="$1"
	if [ ! -e "$gamedir/$version" ]; then
		debug_echo "\nCouldn't find library directory $gamedir/$version"
	else
		debug_echo "\nEntering library directory $gamedir/$version"
		for file in $(ls "$gamedir/$version"); do
			# sort out libs that need to be ignored
			validlib $file
			if [ $? -eq 1 ]; then
				debug_echo "\tignored file: $file"
				continue
			fi
			debug_echo -n "\tfound library file: $file"
			file=$(trunklibnam "$file")
			debug_echo -n " -> $file"
			inarray $file ${needlibarray}
			if [ $? -eq 0 ]; then
				debug_echo " - already in array"
			elif [ $? -eq 1 ]; then
				needlibarray="$needlibarray$file "
				debug_echo ""
			else
				echo "\n\t - ERROR: inarray returned with unexpected error\n"
				exit 1
			fi
		done
		debug_echo "Done with library directory $gamedir/$version"
	fi
}

# function to find the latest present library. Return -1 if none found.
# $1 is the basename of the library without the version suffix (e.g. /usr/lib/libc.so)
# it will return the filename of the latest library version (e.g. /usr/lib/libc.so.96.0)
latest_syslib()
{
	if [ -z "$1" ] ; then
		return 1
	fi
	find "$(dirname $1)" -maxdepth 1 -name "$(basename $1)*" | tail -1
}

symlink_mg_libs()
{
	mg_subdirs="x64
x86"
	debug_echo "\nChecking for MonoGame x64/x86 dir to create symlinks"

	
	if [ \( ! -e "$gamedir/x64" \) -a \( ! -e "$gamedir/x86" \) ]; then
		debug_echo "\nCouldn't find directories x64 or x86 in $gamedir"
	else
		for d in ${mg_subdirs[@]} ; do
			debug_echo "\nProcessing library directory $gamedir/$d"
			for file in $(ls "$gamedir/$d"); do
				# sort out libs that need to be ignored
				validlib $file
				if [ $? -eq 1 ]; then
					debug_echo "\tignored file: $file"
					continue
				fi
				debug_echo "\tfound library file: $file. Replacing with symlink..."
				trunk=$(trunklibnam "$file")
				rm "$gamedir/$d/$file"
				debug_echo -n "\t\tchecking for location of $trunk... "
				if [ -n "$(latest_syslib /usr/local/lib/$trunk)" ] ; then
					debug_echo "found in /usr/local/lib!"
					trunkpath="/usr/local/lib/$trunk"
				elif [ -n "$(latest_syslib /usr/X11R6/lib/$trunk)" ] ; then
					debug_echo "found in /usr/X11R6/lib!"
					trunkpath="/usr/X11R6/lib/$trunk"
				elif [ -n "$(latest_syslib /usr/lib/$trunk)" ] ; then
					debug_echo "found in /usr/lib!"
					trunkpath="/usr/lib/$trunk"
				else
					debug_echo "NOT FOUND!!"
					trunkpath=
					echo "\n\t - ERROR: couldn't find system lib for $file"
				fi
				ln -s "$(latest_syslib "$trunkpath")" "$gamedir/$d/$file"
			done
			debug_echo "Done with library directory $gamedir/$d"
		done
		debug_echo "\nCreating libdl.so.2 symlink\n"
		ln -s "$(latest_syslib /usr/lib/libc.so)" "$gamedir/libdl.so.2"
	fi
}

# check if Steamworks.NET.dll is present, move it away if stub is in $monopath
check_remove_steamworks()
{
	# FIXME: likely not whitespace-safe
	if [ -e "$gamedir/Steamworks.NET.dll" \
		-a -n "$monopath" -a -n "$(ls $(echo "$monopath" | tr -s ':' ' ') | grep -m 1 "Steamworks\.NET\.dll")" ]
	then
		if $(ls $(echo "$monopath" | tr -s ':' ' ') | grep -q "Steamworks\.NET\.dll"); then
			debug_echo "\nFound Steamworks.NET.dll in gamedir and in monopath, moving it out of gamedir"
			mkdir -p "$gamedir/fnaify-backup"
			mv "$gamedir/Steamworks.NET.dll" "$gamedir/fnaify-backup/"
		fi
	fi
}

finish_fnaify()
{
	# Quirks for the runtime invocation of some games

	##########################################################
	# OBSOLETE; look at run() for the place to add to/modify #
	##########################################################

	# Apple Jack 1&2
	if [ -n "$(ls "$gamedir" | grep -m 1 "AJ1.exe")" ] ; then
		debug_echo "Create symlinks to replace MONO_IOMAP for Apple Jack 1&2"
		iomap AppleJack
	fi

	# Blueberry Garden
	if $(ls "$gamedir" | grep -qm 1 Blueberry.exe); then
		debug_echo "Setting 'MONO_FORCE_COMPAT' for Blueberry Garden"
		exe_env="${exe_env}MONO_FORCE_COMPAT=1 "
	fi

	# Cthulhu Saves the World (CSTW)
	if [ -n "$(ls "$gamedir" | grep -m 1 "CSTW.exe")" ] ; then
		debug_echo "Create symlinks to replace MONO_IOMAP for Cthulhu Saves the World"
		iomap CSTW
	fi

	# Dead Pixesl
	if [ -n "$(ls "$gamedir" | grep -m 1 "Dead Pixels.exe")" ] ; then
		debug_echo "Create symlinks to replace MONO_IOMAP for Dead Pixels"
		iomap DeadPixels
	fi

	# Grand Class Melee 2 (GCM2)
	if [ -n "$(ls "$gamedir" | grep -m 1 "Grand Class Melee.exe")" ] ; then
		debug_echo "Create symlinks to replace MONO_IOMAP for Grand Class Melee 2"
		iomap GCM2
	fi

	# Hacknet
	if $(ls "$gamedir" | grep -iqm 1 hacknet); then
		debug_echo "Setting flag '-disableweb' for HackNet"
		exe_flags="${exe_flags}-disableweb "
	fi

	# LaserCat
	if [ -n "$(ls "$gamedir" | grep -m 1 "LaserCat.exe")" ] ; then
		debug_echo "Create symlinks to replace MONO_IOMAP for LaserCat"
		iomap LaserCat
	fi

	# Mount Your Friends
	if [ -n "$(ls "$gamedir" | grep -m 1 "MountYourFriends.exe")" ] ; then
		debug_echo "Create symlinks to replace MONO_IOMAP for Mount Your Friends"
		iomap MountYourFriends
	fi

	# One Finger Death Punch (OFDP)
	if [ -n "$(ls "$gamedir" | grep -m 1 "One Finger Death Punch.exe")" ] ; then
		debug_echo "Create symlinks to replace MONO_IOMAP for One Finger Death Punch"
		iomap OFDP
	fi

	# Phoenix Force
	if [ -n "$(ls "$gamedir" | grep -m 1 "PhoenixForce")" ] ; then
		debug_echo "Create symlinks to replace MONO_IOMAP for Phoenix Force"
		iomap PhoenixForce
	fi

	# Shenzhen I/O
	if $(ls "$gamedir" | grep -iqm 1 shenzhen); then
		debug_echo "Setting 'MONO_FORCE_COMPAT' for Shenzhen I/O"
		exe_env="${exe_env}MONO_FORCE_COMPAT=1 "
	fi

	# ScourgeBringer
	if $(ls "$gamedir" | grep -iqm 1 scourgebringer); then
		debug_echo "Setting flag '-noSound' for ScourgeBringer"
		exe_flags="${exe_flags}-noSound "
	fi

	# Sword of the Stars: The Pit (SOTSTP)
	if $(ls "$gamedir" | grep -qm 1 ThePit); then
		debug_echo "Setting 'MONO_FORCE_COMPAT' for Sword of the Stars: The Pit"
		exe_env="${exe_env}MONO_FORCE_COMPAT=1 "
		iomap SOTSTP
	fi

	# Terraria
	if $(ls "$gamedir" | grep -iqm 1 terraria); then
		debug_echo "Setting 'MONO_FORCE_COMPAT' for Terraria"
		exe_env="${exe_env}MONO_FORCE_COMPAT=1 "
	fi

	echo "Replacing launch script with BSD version..."
	if [ \( -e "$fullscriptpath" \) -a \( ! -e "$fullscriptpath.linux" \) ]; then
		debug_echo -n "\t(creating copy of original launcher script with suffix '.linux')... "
		cp -p "$fullscriptpath" "$fullscriptpath.linux"
		debug_echo "done."
	fi
	create_wrapper
	debug_echo "Launcher script replaced.\n"

	if [ -n "${licenses}" ]; then
		echo "Installed modules are under the following license(s):\n"
		echo "${licenses}"
	fi
	echo "To run the game in $gamedir, use\n"
	echo "./${scriptfile}\n"
	if [ $fna_warning -eq 1 ]; then
		echo "\nWARNING: version of FNA.dll potentially incompatible!"
		echo "If the game doesn't run, try running 'fnaify -i' (or 'fnaify -y').\n"
	fi
	if [ $nlog_warning -eq 1 ]; then
		echo "\nWARNING: version of NLog.dll potentially incompatible!"
		echo "If the game doesn't run, try running 'fnaify -i' (or 'fnaify -y').\n"
	fi
	exit 0
}

# install FNA into gamedir; specify version (e.g. 17.12) as $1
# if XNA bridge should be installed, add "xna_bridge" as $2
install_fna()
{
	if [ $# -lt 1 ]; then
		echo "ERROR: install_fna called with insufficient arguments"
		exit 1
	fi
	fna_version=
	if [ "${1}" = 'latest' ]; then
		# get version number of latest release from GitHub API
		fna_version=$(ftp -Vo - https://api.github.com/repos/FNA-XNA/FNA/releases/latest \
			| grep -Eo "\"tag_name\"\:\"[0-9\.]*\"" \
			| cut -d\" -f4)
	else
		fna_version="$1"
	fi
	echo "\nInstalling FNA ..."
	licenses="${licenses}FNA:\t\tMs-PL (https://github.com/FNA-XNA/FNA/blob/master/licenses/LICENSE)${newline}"
	lastdir="$PWD"
	cd /tmp
	ftp -V https://github.com/FNA-XNA/FNA/releases/download/${fna_version}/FNA-$(echo $fna_version | tr -d '.').zip
	debug_echo "extracting FNA ${fna_version}"
	unzip FNA-$(echo $fna_version | tr -d '.').zip > /dev/null
	if [ \( $# -gt 1 \) -a \( x$2 = 'xxna_bridge' \) ]; then
		echo "\nInstalling FNA.NetStub for XNA ..."
		licenses="${licenses}FNA.NetStub:\tMs-PL (https://github.com/FNA-XNA/FNA.NetStub/blob/master/LICENSE)${newline}"
		ftp -V https://github.com/FNA-XNA/FNA.NetStub/archive/$netstub_commit.tar.gz
		tar zxf $netstub_commit.tar.gz
		mv FNA.NetStub-$netstub_commit FNA.NetStub
		echo -n "compiling XNA ABI/bridge files. This may take a moment... "
		xbuild FNA/abi/Microsoft.Xna.Framework.sln >> /tmp/fnaify-xbuild.log
		echo "done."
		cp /tmp/FNA/abi/bin/Debug/* "$gamedir/"
	else
		echo -n "compiling FNA ${fna_version} with xbuild... "
		xbuild FNA/FNA.sln >> /tmp/fnaify-xbuild.log
		debug_echo "done."
		echo "Moving FNA.dll to fnaify-backup subdirectory"
		mkdir -p "$gamedir/fnaify-backup"
		mv "$gamedir/FNA.dll" "$gamedir/fnaify-backup/"
		cp /tmp/FNA/bin/Debug/FNA.dll "$gamedir"
	fi
	debug_echo "removing the temporary build directory for FNA and returning to previous directory"
	rm -rf /tmp/FNA /tmp/FNA.NetStub
	cd "$lastdir"
}

check_nlog()
{
	if [ -f "$gamedir/NLog.dll" ] ; then
		nlogversion=`monodis --assembly "$gamedir/NLog.dll" | grep "Version" | tr -d [:alpha:] | tr -d " " | tr -d \:`
		nlogmajor=`echo "$nlogversion" | sed -n -E "s/\..*//p"`
		nlogminor=`echo "$nlogversion" | sed -n -E "s/[0-9]+\.([0-9]+)\.[0-9]+\.[0-9]+/\1/p"`
		debug_echo -n "\tNLog.dll version $nlogversion, "
		debug_echo -n "major: $nlogmajor, "
		debug_echo "minor: $nlogminor"
		if [ \( $nlogmajor -lt 4 \) -a \( "x$interaction" = "xi" \) ] ; then
			echo -n "\nInstall NLog 4.6.5 from www.nuget.org? [y/n] "
			response=
			until [ \( "x$response" = "xy" \) -o \( "x$response" = "xn" \) ]
			do
				read response
			done
		elif [ \( $nlogmajor -lt 4 \) -a \( "x$interaction" = "xy" \) ] ; then
			response="y"
		else
			response="n"
		fi
		if [ "x$response" = "xy" ] ; then
			debug_echo "Moving old NLog.dll out of the way"
			mkdir -p "$gamedir/fnaify-backup"
			mv "$gamedir/NLog.dll" "$gamedir/fnaify-backup/"
			lastdir="$PWD"
			mkdir /tmp/nlog
			cd /tmp/nlog
			echo "\nInstalling NLog 4.6.5 ..."
			licenses="${licenses}NLog:\tBSD 3-clause (https://github.com/NLog/NLog/blob/master/LICENSE.txt)${newline}"
			ftp -Vo nlog.4.6.5.nupkg https://www.nuget.org/api/v2/package/NLog/4.6.5
			unzip nlog.4.6.5.nupkg > /dev/null
			cp lib/net45/NLog.dll "$gamedir/"
			cd "$lastdir"
			rm -rf /tmp/nlog
		elif [ $nlogmajor -lt 4 ] ; then
			nlog_warning=1
		fi
	fi
}
# check if this is an XNA game, otherwise abort
xnasetup()
{
	# reset exefile and nexefile to pick only XNA files
	exefile=
	nexefile=0
	IFS='
'
	for assembly in $(cd "${gamedir}" && find . -maxdepth 1 -type f | grep -E ".*\.exe$" | cut -f 2 -d "/" | sort); do
		debug_echo "Checking $assembly for XNA"
		monodis --assemblyref "${gamedir}/$assembly" 2>&1 \
			| grep -iqm 1 "Microsoft.Xna.Framework"
		if [ $? -eq 0 ]; then
			exefile="$exefile$assembly:"
			nexefile=$((nexefile + 1))
		fi
	done
	IFS=$SAVEIFS
	if [ $nexefile -lt 1 ]; then
		echo "No FNA or XNA game found. Quitting."
		exit 1
	fi
	if [ -d "/usr/local/share/fnaify-libs/XNA-bridge" ];then
		monopath="${monopath}/usr/local/share/fnaify-libs/XNA-bridge:"
	else
		if [ "x$interaction" = "xi" ] ; then
			echo -n "\nInstall FNA files from GitHub to for this XNA application? [y/n] "
			response=
			until [ \( "x$response" = "xy" \) -o \( "x$response" = "xn" \) ]
			do
				read response
			done
		elif [ "x$interaction" = "xy" ] ; then
			response="y"
		else
			response="n"
		fi

		if [ "$response" = "y" ]; then
			install_fna latest xna_bridge
		else
			echo "Failed to install FNA/XNA files. Try running with -i or -y flag\n"
			exit 1
		fi
	fi
	
	# convert .wma to .ogg and .wmv to .ogv
	# https://gist.github.com/flibitijibibo/c97bc14aab04b1277d8ef5e97fc9aeff
	IFS="
"
	# FIXME: check for errors on return of these commands
	echo -n "checking for WMA/WMV files and converting. This may take several minutes..."
	for afile in $(find "$gamedir" -name "*.wma"); do
		ffmpeg -loglevel fatal -i "$afile" -c:a libvorbis -q:a 10 \
			"$(echo "$afile" | rev | cut -d. -f2-$(($(echo "$afile" \
			| tr -dc '.' | wc -c) + 1)) | rev).ogg"
	done
	for vfile in $(find . -name "*.wmv"); do
		ffmpeg -loglevel fatal -i "$vfile" -c:v libtheora -q:v 10 -c:a libvorbis \
			-q:a 10 "$(echo "$vfile" | rev | cut -d. -f2-$(($(echo "$vfile" \
			| tr -dc '.' | wc -c) + 1)) | rev).ogv"
	done
	IFS=$SAVEIFS
	echo " done."

	selectexe
	check_remove_steamworks
	debug_echo "creating launch script"
	scriptfile="run_game.sh"
	fullscriptpath="$gamedir/$scriptfile"
	finish_fnaify
}

iomap()
{
	if [ "$1" == "DeadPixels" ] ; then
		ln -sf Sprites Content/sprites
		ln -sf Effects Content/Sprites/effects
		ln -sf Splash Content/Sprites/splash
		ln -sf Items Content/Sprites/InGame/items
		ln -sf Grenades Content/Sprites/InGame/grenades
		ln -sf Hud Content/Sprites/InGame/hud
		ln -sf insideBuildings Content/Sprites/InGame/InsideBuildings
		ln -sf Character Content/Sprites/InGame/character
		ln -sf City Content/Sprites/InGame/city
		ln -sf Traders Content/Sprites/InGame/traders
		ln -sf Zombies Content/Sprites/InGame/zombies
		ln -sf Objects Content/Sprites/InGame/objects
		ln -sf Other Content/Sprites/InGame/other
		ln -sf GunShots Content/Sprites/InGame/gunShots
		ln -sf Buttons Content/Sprites/buttons
		ln -sf Menu Content/Sprites/menu
		ln -sf Cursor Content/Sprites/cursor
		ln -sf Achievements Content/Sprites/achievements
		ln -sf Credits Content/Sprites/credits
		ln -sf Font Content/Sprites/font
		ln -sf preview Content/Sprites/Preview
		ln -sf preview Content/Sprites/Menu/Preview
		ln -sf PsxButtons Content/Sprites/buttons/psxButtons
		ln -sf Cutscene Content/Sprites/CutScene
		ln -sf buildings Content/Sprites/InGame/City/Buildings
		ln -sf mainbackground.xnb Content/ConfigSprites/mainBackground.xnb
		ln -sf largeCuts.xnb Content/Sprites/effects/largecuts.xnb
		ln -sf smallCuts.xnb Content/Sprites/effects/smallcuts.xnb
		ln -sf effects Content/Sprites/Effects
		ln -sf cuemark.xnb Content/Sprites/effects/cueMark.xnb
		ln -sf Static.xnb Content/Sprites/Menu/Preview/static.xnb
	elif [ "$1" == "AppleJack" ] ; then
		ln -sf j_rip.xnb Content/AJ1/j_Rip.xnb
		ln -sf j_rip.xnb Content/AJ2/j_Rip.xnb
		ln -sf Owlturnneo2.xnb Content/AJ1/owlturnneo2.xnb
		ln -sf Owlturnneo2.xnb Content/AJ2/owlturnneo2.xnb
	elif [ "$1" == "CSTW" ] ; then
		ln -sf paws_Happy.xnb Content/Portrait/Paws/Paws_Happy.xnb
	elif [ "$1" == "SOTSTP" ] ; then
		ln -sf UI Content/ui
	elif [ "$1" == "GCM2" ] ; then
		ln -sf water.xnb Content/Sounds/Water.xnb
		ln -sf grass.xnb Content/Sounds/Grass.xnb
		ln -sf move.xnb Content/Sounds/Move.xnb
		ln -sf select.xnb Content/Sounds/Select.xnb
		ln -sf back.xnb Content/Sounds/Back.xnb
		ln -sf squire_base.xnb Content/Textures/Players/Squire_base.xnb
		ln -sf squire_greyscale.xnb Content/Textures/Players/Squire_greyscale.xnb
		ln -sf militia_base.xnb Content/Textures/Players/Militia_base.xnb
		ln -sf militia_greyscale.xnb Content/Textures/Players/Militia_greyscale.xnb
		ln -sf apprentice_base.xnb Content/Textures/Players/Apprentice_base.xnb
		ln -sf apprentice_greyscale.xnb Content/Textures/Players/Apprentice_greyscale.xnb
		ln -sf savant_base.xnb Content/Textures/Players/Savant_base.xnb
		ln -sf savant_greyscale.xnb Content/Textures/Players/Savant_greyscale.xnb
		ln -sf sword.xnb Content/Textures/Weapons/Sword.xnb
		ln -sf arrow.xnb Content/Sounds/Arrow.xnb
		ln -sf scorch.xnb Content/Sounds/Scorch.xnb
		ln -sf bigspeed.xnb Content/Sounds/Bigspeed.xnb
		ln -sf frame_ingame_left_ruin.xnb Content/Textures/Menu/frame_ingame_left_Ruin.xnb
		ln -sf frame_ingame_left_mire.xnb Content/Textures/Menu/frame_ingame_left_Mire.xnb
		ln -sf frame_ingame_right_ruin.xnb Content/Textures/Menu/frame_ingame_right_Ruin.xnb
		ln -sf frame_ingame_left_wood.xnb Content/Textures/Menu/frame_ingame_left_Wood.xnb
		ln -sf ruin_leaf.xnb Content/Textures/Terrain/Ruin_leaf.xnb
		ln -sf frame_ingame_right_wood.xnb Content/Textures/Menu/frame_ingame_right_Wood.xnb
		ln -sf bigblow1.xnb Content/Sounds/Bigblow1.xnb
		ln -sf ruin_grassmove.xnb Content/Textures/Terrain/Ruin_grassmove.xnb
		ln -sf wood_leaf.xnb Content/Textures/Terrain/Wood_leaf.xnb
		ln -sf ruin_watermove.xnb Content/Textures/Terrain/Ruin_watermove.xnb
		ln -sf castshort.xnb Content/Sounds/Castshort.xnb
		ln -sf frame_ingame_right_mire.xnb Content/Textures/Menu/frame_ingame_right_Mire.xnb
		ln -sf frame_ingame_left_dune.xnb Content/Textures/Menu/frame_ingame_left_Dune.xnb
		ln -sf sword1.xnb Content/Sounds/Sword1.xnb
	elif [ "$1" == "LaserCat" ] ; then
		ln -sf audio Content/Audio
	elif [ "$1" == "MountYourFriends" ] ; then
		ln -sf menuBg.xnb Content/images/menubg.xnb
		ln -sf humanClean.xnb Content/images/humanclean.xnb
		ln -sf humanCleanNorm.xnb Content/images/humancleannorm.xnb
		ln -sf menuMarker.xnb Content/images/menumarker.xnb
		ln -sf stegersaurusLogo.xnb Content/images/backdrops/stegersauruslogo.xnb
		ln -sf UIComponents.xnb Content/images/uicomponents.xnb
		ln -sf restrictedArea.xnb Content/images/restrictedarea.xnb
		ln -sf goatSheet.xnb Content/images/goatsheet.xnb
		ln -sf BP3_SSTRIP_64.xnb Content/images/bp3_sstrip_64.xnb
		ln -sf BP3_SSTRIP_32.xnb Content/images/bp3_sstrip_32.xnb
		ln -sf keySheet.xnb Content/images/keysheet.xnb
	elif [ "$1" == "OFDP" ] ; then
		ln -sf font2.xnb Content/Font2.xnb
		ln -sf font5.xnb Content/Font5.xnb
		ln -sf font6.xnb Content/Font6.xnb
	elif [ "$1" == "PhoenixForce" ] ; then
		ln -sf LIfeBar.xnb Content/1.4/Boss/lifeBar.xnb
		ln -sf firewavexml.xml Content/1.4/Player/fireWavexml.xml
		ln -sf firewave.xnb Content/1.4/Player/fireWave.xnb
	else
		echo "ERROR: invalid or no parameter for iomap()"
		exit 1
	fi
}

create_wrapper()
{
	cat <<EOF > "$fullscriptpath"
#!/bin/sh

# fnaify wrapper script for launching FNA games on BSD

latest_syslib()
{
	if [ -z "\$1" ] ; then
		return 1
	fi
	find "\$(dirname \$1)" -maxdepth 1 -name "\$(basename \$1)*" | tail -1
}

trunklibnam()
{
	libnam="\$1"
	echo "\$libnam" | sed -n -E "s/[\.0-9]*$//p"
}

echo -n "NOTE: if game should unexpectedly fail to start, make sure datasize limit is high enough. "
echo "AT LEAST 2G are recommended for most games. See ksh(1) for ulimit command documentation"

cd "\`dirname "\$0"\`" # Move to the game's location in case it was invoked from elsewhere

# check if broken symlinks exist in the game directory
for l in \$(find . -maxdepth 2 -type l); do
	if [ ! -e "\$l" ] ; then
		newl="\$(latest_syslib "\$(trunklibnam "\$(readlink \$l)")")"
		if [ -z "\$newl" ] ; then
			echo "ERROR: Missing library for \$l. Expect trouble."
		else
			ln -fs "\$newl" "\$l"
		fi
	fi
done

LD_LIBRARY_PATH="$(echo "$depdir" | sed -E 's/:$//')" MONO_PATH="$(echo "$monopath" | sed -E 's/:$//' | sed -E 's/^://')" MONO_CONFIG="$monoconfig" $exe_env exec "$FNAIFY_MONO" "$(echo "$my_exe" | tr -d '\:')" $exe_flags \$*
EOF

	chmod +x "$fullscriptpath"
}

# End of Variables and Functions

debug_echo "Dependency directory string: $depdir\n"

# Identify mono and FNA/MonoGame framework files first, warn/break if errors

if [ -z "$FNAIFY_MONO" ]; then
	FNAIFY_MONO="mono"
fi

debug_echo "Checking mono, monodis, framework library (FNA/MonoGame)..."
"$FNAIFY_MONO" --version 2>/dev/null >/dev/null
if [ "$?" -gt 0 ]; then
	echo "error calling mono - aborting... Please make sure that mono is in path or set it in FNAIFY_MONO environment variable!"
	exit 1
fi
# check if monodis can be called
monodis 2>/dev/null
if [ "$?" -eq 127 ]; then
	echo "error calling monodis - aborting... Please make sure that monodis is in the PATH!"
	exit 1
fi
# does any of the framework files exist in $gamedir?
if [ -e "$gamedir/FNA.dll" ]; then
	debug_echo "\tFound FNA.dll"
elif [ -e "$gamedir/MonoGame.Framework.dll" ]; then
	debug_echo "\tFound MonoGame.Framework.dll"
else
	# games without framework files:
	# Atom Zombie Smasher
	# Eliza
	# Molek-Syntez
	# Exapunks
	# Opus Magnum (Lightning.exe)
	# Shenzhen I/O
	# SpaceChem (64bit and fullscreen update from 2020-07-15)
	if [ -n "$(ls "$gamedir" | grep -im 1 "atomzombiesmasher")" ] ; then
		debug_echo "\nAtom Zombie Smasher requires libatomstb.so"
		if $(ls $(echo "$depdir" | tr -s ':' ' ') | grep -q "$needlib")
		then
			debug_echo "\tfound libatomstb library"
		else
			if [ "x$interaction" = "xi" ] ; then
				echo -n "Compile and install libatomstb.so in game directory? [y/n]"
				response=
				until [ \( "x$response" = "xy" \) -o \( "x$response" = "xn" \) ]
				do
					read response
				done
			elif [ "x$interaction" = "xy" ] ; then
				response="y"
			else
				response="n"
			fi

			if [ "x$response" = "xy" ] ; then
				lastdir="$PWD"
				cd /tmp/
				echo "\nInstalling libatomstb.so ..."
				licenses="${licenses}libatomstb:\thttps://github.com/flibitijibibo/AZSNotSFML/blob/master/NotSFML.cs${newline}"
				ftp -V https://github.com/flibitijibibo/AZSNotSFML/archive/$libatomstb_commit.tar.gz
				tar zxf $libatomstb_commit.tar.gz
				mv AZSNotSFML-$libatomstb_commit AZSNotSFML
				echo -n "compiling libatomstb.so. This may take a moment... "
				cc -O2 -pipe -c -fpic -I/usr/include/sys \
					-o AZSNotSFML/atomstb/atomstb.o AZSNotSFML/atomstb/atomstb.c
				cc -shared -o AZSNotSFML/atomstb/libatomstb.so \
					AZSNotSFML/atomstb/atomstb.o
				echo "done."
				cp /tmp/AZSNotSFML/atomstb/libatomstb.so "$gamedir/"
				cd "$lastdir"
				rm -rf /tmp/AZSNotSFML
			fi
		fi
	elif [ \( -n "$(ls "$gamedir" | grep -im 1 "eliza.exe")" \) \
		-o \( -n "$(ls "$gamedir" | grep -im 1 "molek-syntez.exe")" \) \
		-o \( -n "$(ls "$gamedir" | grep -im 1 "exapunks.exe")" \) \
		-o \( -n "$(ls "$gamedir" | grep -im 1 "lightning.exe")" \) \
		-o \( -n "$(ls "$gamedir" | grep -im 1 "shenzhen.exe")" \) \
		-o \( -n "$(ls "$gamedir" | grep -im 1 "spacechem.exe")" \) \
		-o \( -n "$(ls "$gamedir" | grep -im 1 "streets of fury ex.exe")" \) \
		] ; then
		debug_echo "\nCompatible game without XNA/FNA framework file found."
		debug_echo 'Creating $HOME/Desktop directory which is needed for some Zachtronics games'
		mkdir -p "$HOME/Desktop"
	else
		check_nlog
		xnasetup	# check if this is an XNA game and set up in that case
	fi
fi

# The following code assumes that only one of FNA.dll and MonoGame.Framework.dll is present
if [ -e "$gamedir/FNA.dll" ]; then
	fnaversion=`monodis --assembly "$gamedir/FNA.dll" | grep "Version" | tr -d [:alpha:] | tr -d " " | tr -d \:`
	fnamajor=`echo "$fnaversion" | sed -n -E "s/\..*//p"`
	fnaminor=`echo "$fnaversion" | sed -n -E "s/[0-9]+\.([0-9]+)\.[0-9]+\.[0-9]+/\1/p"`
	debug_echo -n "\tFNA.dll version $fnaversion, "
	debug_echo -n "major: $fnamajor, "
	debug_echo "minor: $fnaminor"
	if [ $fnamajor -lt 16 ] || ( [ $fnamajor -eq 16 ] && [ $fnaminor -lt 5 ] )
	then
		fna_warning=1
	fi
elif [ -e "$gamedir/MonoGame.Framework.dll" ]; then
	mgversion=`monodis --assembly "$gamedir/MonoGame.Framework.dll" | grep "Version" | tr -d [:alpha:] | tr -d " " | tr -d \:`
	debug_echo "\tMonoGame.Framework.dll version $mgversion"
fi

check_nlog

debug_echo "\nTrying to identify the launch script file automatically..."
scount=0
scriptfilearray="" # files that are possible launchscripts
sfile=""
IFS="
"
for sfile in $(cd "$gamedir" && find . -maxdepth 1 -type f | grep -Ev "\.[^/]|mono.*config$" | cut -f 2 -d "/" | sort); do
	debug_echo "\tfound candidate for launch script file: $sfile"
	if [ -z "${scriptfilearray}" ]; then
		scriptfilearray="$sfile"
	else
		scriptfilearray="$scriptfilearray $sfile"
	fi
	scount=$((scount + 1))
done
IFS=$SAVEIFS

if [ \( $scount -gt 1 \) -a \( "x$interaction" = "xi" \) ]; then
	i=1
	for fsc in $scriptfilearray; do
		echo "$i: ${fsc}"
		i=$((i + 1))
	done
	input_script=0
	# Parentheses for grouping must be escaped with '\'
	# check for range of numbers, number of characters, and presence of non-digit characters
	while [ \( $(echo "$input_script" | wc -c) -gt 2 \) -o \( -z "$(echo "$input_script" | grep [1-9])" \) -o \( $input_script -gt $((i - 1)) \) ]; do
		echo -n "Enter number of the file to use as the launch script: "
		read input_script
	done
	# http://www.etalabs.net/sh_tricks.html - Working with arrays
	set -- ${scriptfilearray}
	input_script="\$$input_script"
	# hmm, eval... simplest way to pick an array element it seems.
	# http://mywiki.wooledge.org/BashFAQ/048
	# NOTE: this only works for up to 9 candidate files
	scriptfile=$(eval echo "$input_script")
elif [ $scount -eq 1 ]; then
	scriptfile="${scriptfilearray}"
else
	scriptfile="run_game.sh"
fi

debug_echo "Identified the following file as the launch script: ${scriptfile}\n"

# path and file variable definitions
fullscriptpath="$gamedir/$scriptfile"

set -A configfilesarray		# empties array
nconfigfilesarray=0
debug_echo "Identifying config files..."
IFS="
"
for cfile in $(ls "$gamedir" | grep "\.config$"); do
	debug_echo "\tfound config file: $cfile"
	configfilesarray[$((${#configfilesarray[*]} + 1))]="$cfile"
	nconfigfilesarray=$((nconfigfilesarray + 1))
done
IFS=$SAVEIFS
debug_echo "Done identifying config files.\n"

# identify required libraries in .config files and lib{,64} directories
# FIXME: filenames not whitespace-safe (but should not be used in such files anyway)
printdash $(debug_echo "Identifying libraries required by the game...")

#for MidBoss, add SDL2_image_compact to needlib
MidBoss=0
ls "$gamedir" | grep -iqm 1 "midboss"
if [ $? -eq 0 ]; then
	MidBoss=1
	needlibarray="${needlibarray}libSDL2_image_compact.so "
fi

libraryname "lib64"
libraryname "lib"
libraryname "x64"
libraryname "x86"

debug_echo "Obtaining library names from the following config files"
if [ $nconfigfilesarray -lt 1 ]; then
	debug_echo "No config files found."
else
	cfile=""
	IFS="
"
	for cfile in ${configfilesarray[@]}; do
		IFS=$SAVEIFS
		debug_echo "\t$cfile"
		linuxlines=$(grep "os\=\"linux" "$gamedir/$cfile")
		for libstring in $(echo "$linuxlines" | sed -n -E "s/.*target=\"([^\"]+).*/\1/p"); do
			# Fix where library name includes directory information
			libstring=$(echo "$libstring" | sed -E 's/^.\///')
			# remove directories at the start of lib name
			libstring=$(echo "$libstring" | sed -E 's/^.*\///')
			debug_echo -n "\t\tFound library string: $libstring"
			# sort out libs that need to be ignored
			validlib $libstring
			if [ $? -eq 1 ]; then
				debug_echo " - ignored"
				continue
			fi
			libstring=$(trunklibnam "$libstring")
			debug_echo -n " -> $libstring"
			# add to libstring to needlibarray if not in there yet
			inarray $libstring $needlibarray
			if [ $? -eq 0 ]; then
				debug_echo " - already in array"
			elif [ $? -eq 1 ]; then
				needlibarray="$needlibarray$libstring "
				debug_echo " - added to array"
			else
				echo "\n\t - ERROR: inarray returned with unexpected error\n"
				exit 1
			fi
		done
	done
	debug_echo "Done with identifying libraries in config files"
fi
debug_echo "Done with identification of needed libraries."

debug_echo -n "Fixing libpng filenames if present..."
needlibarray=$(echo "${needlibarray}" | sed -E "s/(libpng)..(\.so.*)/\1\2/")
debug_echo " done.\n"

# Check if the libraries are available on the system (/usr/local/lib).
# If not, break and inform user which libraries need to be installed.
echo -n "Checking installed libraries... "
debug_echo ""

# missinglibs[*] accumulates missing library names to inform user
missinglibs=""
for needlib in ${needlibarray}; do
	if $(ls $(echo "$depdir" | tr -s ':' ' ') | grep -q "$needlib")
	then
		IFS=$SAVEIFS
		debug_echo "\tfound library for: $needlib"
	else
		IFS=$SAVEIFS
		debug_echo "\tNot found: $needlib"
		missinglibs="$missinglibs$needlib "
	fi
done
echo "done.\n"

if [ -n "${missinglibs}" ]; then
	#printdash $(echo "Result of configuration testing: FAILED")
	echo "\nCould not find the following libraries:\n
	${missinglibs}\n"
	exit 1
#else
	#printdash $(echo "Result of configuration testing: SUCCESS")
fi

# identify all .config files that do dllmap and move out of the way
debug_echo 'moving .config files with dllmap out of the way'
if [ ! -d "$gamedir/fnaify-backup" ] ; then	# FIXME: is this check needed?
	mkdir -p "$gamedir/fnaify-backup"
fi
IFS="
"
for config_file in ${configfilesarray[@]}; do
	IFS=$SAVEIFS
	if $(grep -q "dllmap" "$config_file"); then
		mv "$config_file" "$gamedir/fnaify-backup/"
	fi
done

# if MidBoss, add a FNA.dll.config to overwrite libSDL2_image_compact
if [ $MidBoss -eq 1 ]; then
	debug_echo 'creating FNA.dll.config for MidBoss'
	cat <<EOF > "$gamedir/FNA.dll.config"
<?xml version="1.0" encoding="utf-8"?>
<configuration>
	<dllmap dll="SDL2_image.dll" target="libSDL2_image_compact.so"/>
</configuration>
EOF
fi

debug_echo "Moving some bundled dll files into fnaify-backup subfolder... "
for file in $monofilearray; do
	if [ -e "$gamedir/$file" ]; then
		debug_echo "\tFound bundled mono file: $file"
		mkdir -p "$gamedir/fnaify-backup"
		mv "$gamedir/$file" "$gamedir/fnaify-backup/"
	fi
done
debug_echo " done."

# if necessary, replace FNA.dll
fna_replace=""
lastdir=""
if [ $fna_warning -eq 1 ]; then
	if [ "x$interaction" = "xi" ] ; then
		echo "\nWARNING: version of FNA.dll potentially incompatble!"
		echo "Fetch FNA 17.12 from GitHub, compile, and replace bundled FNA.dll?"
		echo "FNA is distributed under Microsoft Public License. The license"
		echo "can be viewed here:"
		echo "https://github.com/FNA-XNA/FNA/blob/master/licenses/LICENSE"
		echo -n "Proceed with replacing FNA with version 17.12 (recommended)? [y/n] "
		until [ "$fna_replace" = "y" -o "$fna_replace" = "n" ]; do
			read fna_replace
		done
	elif [ "x$interaction" = "xy" ] ; then
		fna_replace="y"
	else
		fna_replace="n"
	fi

	if [ "$fna_replace" = "y" ]; then
		install_fna 17.12
		fna_warning=0
	fi
fi

check_remove_steamworks

symlink_mg_libs

IFS="
"
for xfile in $(cd "$gamedir" && find . -maxdepth 1 -type f -iname "*.exe" | cut -f 2 -d "/" | sort); do
	exefile="$exefile$xfile:"
	nexefile=$((nexefile + 1))
done
IFS=$SAVEIFS
IFS="
"
for xfile in $(cd "$gamedir" && find . -maxdepth 1 -type f -iname "*.exe" | cut -f 2 -d "/" | sort); do
	exefile="$exefile$xfile:"
	nexefile=$((nexefile + 1))
done
IFS=$SAVEIFS
selectexe

finish_fnaify
